/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UnityBestHttp2Client.Client;
using UnityBestHttp2Client.Model;

namespace UnityBestHttp2Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface WgOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns></returns>
        void orderControllerDeleteAllByWgId (String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> orderControllerDeleteAllByWgIdWithHttpInfo (String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns></returns>
        void orderControllerDeleteAllByWgIdAndPhase (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> orderControllerDeleteAllByWgIdAndPhaseWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns></returns>
        void orderControllerDeleteOne (String wgId, Integer phase, String orderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> orderControllerDeleteOneWithHttpInfo (String wgId, Integer phase, String orderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>List</returns>
        List orderControllerFindAll (String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> orderControllerFindAllWithHttpInfo (String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        List orderControllerFindAllAtPhase (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> orderControllerFindAllAtPhaseWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>List</returns>
        List orderControllerFindByAuth (String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> orderControllerFindByAuthWithHttpInfo (String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        List orderControllerFindByAuthAtPhase (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> orderControllerFindByAuthAtPhaseWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        List orderControllerFindDoneByAuthBeforePhase (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> orderControllerFindDoneByAuthBeforePhaseWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>WgOrderDto</returns>
        WgOrderDto orderControllerFindOne (String wgId, Integer phase, String orderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>ApiResponse of WgOrderDto</returns>
        ApiResponse<WgOrderDto> orderControllerFindOneWithHttpInfo (String wgId, Integer phase, String orderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        List orderControllerFindOngoing (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> orderControllerFindOngoingWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns></returns>
        void orderControllerPatchOne (UpdateWgOrderDto body, String wgId, Integer phase, String orderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> orderControllerPatchOneWithHttpInfo (UpdateWgOrderDto body, String wgId, Integer phase, String orderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new AerialProtectionOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostAerialProtectionOrder (CreateAerialProtectionOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new AerialProtectionOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostAerialProtectionOrderWithHttpInfo (CreateAerialProtectionOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new AttackOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostAttackOrder (CreateAttackOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new AttackOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostAttackOrderWithHttpInfo (CreateAttackOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new BombOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostBombOrder (CreateBombOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new BombOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostBombOrderWithHttpInfo (CreateBombOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new BuildConsOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostBuildConsOrder (CreateBuildConsOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new BuildConsOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostBuildConsOrderWithHttpInfo (CreateBuildConsOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new BuildInfraOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostBuildInfraOrder (CreateBuildInfraOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new BuildInfraOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostBuildInfraOrderWithHttpInfo (CreateBuildInfraOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new CancelOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">OrderId to cancel</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostCancelOrder (CreateCancelOrderDto body, String wgId, Integer phase, String orderId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new CancelOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">OrderId to cancel</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostCancelOrderWithHttpInfo (CreateCancelOrderDto body, String wgId, Integer phase, String orderId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new DestroyConsOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostDestroyConsOrder (CreateDestroyConsOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new DestroyConsOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostDestroyConsOrderWithHttpInfo (CreateDestroyConsOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new DestroyInfraOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostDestroyInfraOrder (CreateDestroyInfraOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new DestroyInfraOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostDestroyInfraOrderWithHttpInfo (CreateDestroyInfraOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new FortifyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostFortifyOrder (CreateFortifyOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new FortifyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostFortifyOrderWithHttpInfo (CreateFortifyOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostMoveOrder (CreateMoveOrderDto body, String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostMoveOrderWithHttpInfo (CreateMoveOrderDto body, String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new MoveStockOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostMoveStockOrder (CreateMoveStockOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new MoveStockOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostMoveStockOrderWithHttpInfo (CreateMoveStockOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new PoundOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostPoundOrder (CreatePoundOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new PoundOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostPoundOrderWithHttpInfo (CreatePoundOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new SpyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostSpyOrder (CreateSpyOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new SpyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostSpyOrderWithHttpInfo (CreateSpyOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new SpyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostSurveilOrder (CreateSurveilOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new SpyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostSurveilOrderWithHttpInfo (CreateSurveilOrderDto body, Integer phase, String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new UnfortifyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        WgStateEntity orderControllerPostUnfortifyOrder (CreateUnfortifyOrderDto body, Integer phase, String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new UnfortifyOrder
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        ApiResponse<WgStateEntity> orderControllerPostUnfortifyOrderWithHttpInfo (CreateUnfortifyOrderDto body, Integer phase, String wgId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WgOrdersApi : WgOrdersApi
    {
        private UnityBestHttp2Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WgOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WgOrdersApi(String basePath)
        {
            this.Configuration = new UnityBestHttp2Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UnityBestHttp2Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WgOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WgOrdersApi(UnityBestHttp2Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UnityBestHttp2Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UnityBestHttp2Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UnityBestHttp2Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UnityBestHttp2Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns></returns>
        public void orderControllerDeleteAllByWgId (String wgId)
        {
             orderControllerDeleteAllByWgIdWithHttpInfo(wgId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> orderControllerDeleteAllByWgIdWithHttpInfo (String wgId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerDeleteAllByWgId");

            var localVarPath = "/v1/wgs/{wgId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerDeleteAllByWgId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns></returns>
        public void orderControllerDeleteAllByWgIdAndPhase (String wgId, Integer phase)
        {
             orderControllerDeleteAllByWgIdAndPhaseWithHttpInfo(wgId, phase);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> orderControllerDeleteAllByWgIdAndPhaseWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerDeleteAllByWgIdAndPhase");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerDeleteAllByWgIdAndPhase");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerDeleteAllByWgIdAndPhase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns></returns>
        public void orderControllerDeleteOne (String wgId, Integer phase, String orderId)
        {
             orderControllerDeleteOneWithHttpInfo(wgId, phase, orderId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> orderControllerDeleteOneWithHttpInfo (String wgId, Integer phase, String orderId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerDeleteOne");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerDeleteOne");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling WgOrdersApi->orderControllerDeleteOne");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerDeleteOne", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>List</returns>
        public List orderControllerFindAll (String wgId)
        {
             ApiResponse<List> localVarResponse = orderControllerFindAllWithHttpInfo(wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > orderControllerFindAllWithHttpInfo (String wgId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindAll");

            var localVarPath = "/v1/wgs/{wgId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        public List orderControllerFindAllAtPhase (String wgId, Integer phase)
        {
             ApiResponse<List> localVarResponse = orderControllerFindAllAtPhaseWithHttpInfo(wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > orderControllerFindAllAtPhaseWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindAllAtPhase");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerFindAllAtPhase");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindAllAtPhase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>List</returns>
        public List orderControllerFindByAuth (String wgId)
        {
             ApiResponse<List> localVarResponse = orderControllerFindByAuthWithHttpInfo(wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > orderControllerFindByAuthWithHttpInfo (String wgId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindByAuth");

            var localVarPath = "/v1/wgs/{wgId}/orders/byAuth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindByAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        public List orderControllerFindByAuthAtPhase (String wgId, Integer phase)
        {
             ApiResponse<List> localVarResponse = orderControllerFindByAuthAtPhaseWithHttpInfo(wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > orderControllerFindByAuthAtPhaseWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindByAuthAtPhase");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerFindByAuthAtPhase");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/byAuth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindByAuthAtPhase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        public List orderControllerFindDoneByAuthBeforePhase (String wgId, Integer phase)
        {
             ApiResponse<List> localVarResponse = orderControllerFindDoneByAuthBeforePhaseWithHttpInfo(wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > orderControllerFindDoneByAuthBeforePhaseWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindDoneByAuthBeforePhase");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerFindDoneByAuthBeforePhase");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/byAuth/done";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindDoneByAuthBeforePhase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>WgOrderDto</returns>
        public WgOrderDto orderControllerFindOne (String wgId, Integer phase, String orderId)
        {
             ApiResponse<WgOrderDto> localVarResponse = orderControllerFindOneWithHttpInfo(wgId, phase, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>ApiResponse of WgOrderDto</returns>
        public ApiResponse< WgOrderDto > orderControllerFindOneWithHttpInfo (String wgId, Integer phase, String orderId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindOne");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerFindOne");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling WgOrdersApi->orderControllerFindOne");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindOne", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgOrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgOrderDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgOrderDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        public List orderControllerFindOngoing (String wgId, Integer phase)
        {
             ApiResponse<List> localVarResponse = orderControllerFindOngoingWithHttpInfo(wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > orderControllerFindOngoingWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerFindOngoing");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerFindOngoing");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/ongoing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerFindOngoing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns></returns>
        public void orderControllerPatchOne (UpdateWgOrderDto body, String wgId, Integer phase, String orderId)
        {
             orderControllerPatchOneWithHttpInfo(body, wgId, phase, orderId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">Order id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> orderControllerPatchOneWithHttpInfo (UpdateWgOrderDto body, String wgId, Integer phase, String orderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPatchOne");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPatchOne");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPatchOne");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling WgOrdersApi->orderControllerPatchOne");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPatchOne", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Create a new AerialProtectionOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostAerialProtectionOrder (CreateAerialProtectionOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostAerialProtectionOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new AerialProtectionOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostAerialProtectionOrderWithHttpInfo (CreateAerialProtectionOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostAerialProtectionOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostAerialProtectionOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostAerialProtectionOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/aerialprotection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostAerialProtectionOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new AttackOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostAttackOrder (CreateAttackOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostAttackOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new AttackOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostAttackOrderWithHttpInfo (CreateAttackOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostAttackOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostAttackOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostAttackOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/attack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostAttackOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new BombOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostBombOrder (CreateBombOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostBombOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new BombOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostBombOrderWithHttpInfo (CreateBombOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostBombOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostBombOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostBombOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/bomb";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostBombOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new BuildConsOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostBuildConsOrder (CreateBuildConsOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostBuildConsOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new BuildConsOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostBuildConsOrderWithHttpInfo (CreateBuildConsOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostBuildConsOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostBuildConsOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostBuildConsOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/buildCons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostBuildConsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new BuildInfraOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostBuildInfraOrder (CreateBuildInfraOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostBuildInfraOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new BuildInfraOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostBuildInfraOrderWithHttpInfo (CreateBuildInfraOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostBuildInfraOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostBuildInfraOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostBuildInfraOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/buildInfra";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostBuildInfraOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new CancelOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">OrderId to cancel</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostCancelOrder (CreateCancelOrderDto body, String wgId, Integer phase, String orderId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostCancelOrderWithHttpInfo(body, wgId, phase, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new CancelOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <param name="orderId">OrderId to cancel</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostCancelOrderWithHttpInfo (CreateCancelOrderDto body, String wgId, Integer phase, String orderId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostCancelOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostCancelOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostCancelOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling WgOrdersApi->orderControllerPostCancelOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/cancelOrder/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostCancelOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new DestroyConsOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostDestroyConsOrder (CreateDestroyConsOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostDestroyConsOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new DestroyConsOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostDestroyConsOrderWithHttpInfo (CreateDestroyConsOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostDestroyConsOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostDestroyConsOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostDestroyConsOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/destroyCons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostDestroyConsOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new DestroyInfraOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostDestroyInfraOrder (CreateDestroyInfraOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostDestroyInfraOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new DestroyInfraOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostDestroyInfraOrderWithHttpInfo (CreateDestroyInfraOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostDestroyInfraOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostDestroyInfraOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostDestroyInfraOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/destroyInfra";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostDestroyInfraOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new FortifyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostFortifyOrder (CreateFortifyOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostFortifyOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new FortifyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostFortifyOrderWithHttpInfo (CreateFortifyOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostFortifyOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostFortifyOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostFortifyOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/fortify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostFortifyOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostMoveOrder (CreateMoveOrderDto body, String wgId, Integer phase)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostMoveOrderWithHttpInfo(body, wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostMoveOrderWithHttpInfo (CreateMoveOrderDto body, String wgId, Integer phase)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostMoveOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostMoveOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostMoveOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostMoveOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new MoveStockOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostMoveStockOrder (CreateMoveStockOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostMoveStockOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new MoveStockOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostMoveStockOrderWithHttpInfo (CreateMoveStockOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostMoveStockOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostMoveStockOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostMoveStockOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/movestock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostMoveStockOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new PoundOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostPoundOrder (CreatePoundOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostPoundOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new PoundOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostPoundOrderWithHttpInfo (CreatePoundOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostPoundOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostPoundOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostPoundOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/pound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostPoundOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new SpyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostSpyOrder (CreateSpyOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostSpyOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new SpyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostSpyOrderWithHttpInfo (CreateSpyOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostSpyOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostSpyOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostSpyOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/spy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostSpyOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new SpyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostSurveilOrder (CreateSurveilOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostSurveilOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new SpyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostSurveilOrderWithHttpInfo (CreateSurveilOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostSurveilOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostSurveilOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostSurveilOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/surveil";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostSurveilOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

        /// <summary>
        ///  Create a new UnfortifyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>WgStateEntity</returns>
        public WgStateEntity orderControllerPostUnfortifyOrder (CreateUnfortifyOrderDto body, Integer phase, String wgId)
        {
             ApiResponse<WgStateEntity> localVarResponse = orderControllerPostUnfortifyOrderWithHttpInfo(body, phase, wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new UnfortifyOrder
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="phase">Phase number</param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <returns>ApiResponse of WgStateEntity</returns>
        public ApiResponse< WgStateEntity > orderControllerPostUnfortifyOrderWithHttpInfo (CreateUnfortifyOrderDto body, Integer phase, String wgId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgOrdersApi->orderControllerPostUnfortifyOrder");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgOrdersApi->orderControllerPostUnfortifyOrder");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgOrdersApi->orderControllerPostUnfortifyOrder");

            var localVarPath = "/v1/wgs/{wgId}/orders/phase/{phase}/unfortify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("orderControllerPostUnfortifyOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgStateEntity)));
        }

    }
}

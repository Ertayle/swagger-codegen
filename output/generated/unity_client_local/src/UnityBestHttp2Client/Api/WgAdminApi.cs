/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UnityBestHttp2Client.Client;
using UnityBestHttp2Client.Model;

namespace UnityBestHttp2Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface WgAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns></returns>
        void wgAdminControllerDeleteAllByWgId (String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> wgAdminControllerDeleteAllByWgIdWithHttpInfo (String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns></returns>
        void wgAdminControllerDeleteAllByWgIdAndPhase (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> wgAdminControllerDeleteAllByWgIdAndPhaseWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns></returns>
        void wgAdminControllerDeleteOne (String wgId, Integer phase, String id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> wgAdminControllerDeleteOneWithHttpInfo (String wgId, Integer phase, String id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>List</returns>
        List wgAdminControllerFindAll (String wgId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> wgAdminControllerFindAllWithHttpInfo (String wgId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        List wgAdminControllerFindAllAtPhase (String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> wgAdminControllerFindAllAtPhaseWithHttpInfo (String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>WgAdminDto</returns>
        WgAdminDto wgAdminControllerFindOne (String wgId, Integer phase, String id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        ApiResponse<WgAdminDto> wgAdminControllerFindOneWithHttpInfo (String wgId, Integer phase, String id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns></returns>
        void wgAdminControllerPatchOne (UpdateWgAdminDto body, String wgId, Integer phase, String id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> wgAdminControllerPatchOneWithHttpInfo (UpdateWgAdminDto body, String wgId, Integer phase, String id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        WgAdminDto wgAdminControllerPostHandleConstructionsWgAdmin (CreateHandleConstructionsWgAdminDto body, String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        ApiResponse<WgAdminDto> wgAdminControllerPostHandleConstructionsWgAdminWithHttpInfo (CreateHandleConstructionsWgAdminDto body, String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        WgAdminDto wgAdminControllerPostHandleCurrenciesWgAdmin (CreateHandleCurrenciesWgAdminDto body, String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        ApiResponse<WgAdminDto> wgAdminControllerPostHandleCurrenciesWgAdminWithHttpInfo (CreateHandleCurrenciesWgAdminDto body, String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        WgAdminDto wgAdminControllerPostHandleRessourcesWgAdmin (CreateHandleRessourcesWgAdminDto body, String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        ApiResponse<WgAdminDto> wgAdminControllerPostHandleRessourcesWgAdminWithHttpInfo (CreateHandleRessourcesWgAdminDto body, String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        WgAdminDto wgAdminControllerPostSetInfraTypeWgAdmin (CreateSetInfraTypeWgAdminDto body, String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        ApiResponse<WgAdminDto> wgAdminControllerPostSetInfraTypeWgAdminWithHttpInfo (CreateSetInfraTypeWgAdminDto body, String wgId, Integer phase);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        WgAdminDto wgAdminControllerPostSetTerritoryOwnerWgAdmin (CreateSetTerritoryOwnerWgAdminDto body, String wgId, Integer phase);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        ApiResponse<WgAdminDto> wgAdminControllerPostSetTerritoryOwnerWgAdminWithHttpInfo (CreateSetTerritoryOwnerWgAdminDto body, String wgId, Integer phase);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WgAdminApi : WgAdminApi
    {
        private UnityBestHttp2Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WgAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WgAdminApi(String basePath)
        {
            this.Configuration = new UnityBestHttp2Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UnityBestHttp2Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WgAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WgAdminApi(UnityBestHttp2Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UnityBestHttp2Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UnityBestHttp2Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UnityBestHttp2Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UnityBestHttp2Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns></returns>
        public void wgAdminControllerDeleteAllByWgId (String wgId)
        {
             wgAdminControllerDeleteAllByWgIdWithHttpInfo(wgId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> wgAdminControllerDeleteAllByWgIdWithHttpInfo (String wgId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerDeleteAllByWgId");

            var localVarPath = "/v1/wgs/{wgId}/admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerDeleteAllByWgId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns></returns>
        public void wgAdminControllerDeleteAllByWgIdAndPhase (String wgId, Integer phase)
        {
             wgAdminControllerDeleteAllByWgIdAndPhaseWithHttpInfo(wgId, phase);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> wgAdminControllerDeleteAllByWgIdAndPhaseWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerDeleteAllByWgIdAndPhase");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerDeleteAllByWgIdAndPhase");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerDeleteAllByWgIdAndPhase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns></returns>
        public void wgAdminControllerDeleteOne (String wgId, Integer phase, String id)
        {
             wgAdminControllerDeleteOneWithHttpInfo(wgId, phase, id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> wgAdminControllerDeleteOneWithHttpInfo (String wgId, Integer phase, String id)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerDeleteOne");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerDeleteOne");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WgAdminApi->wgAdminControllerDeleteOne");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerDeleteOne", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>List</returns>
        public List wgAdminControllerFindAll (String wgId)
        {
             ApiResponse<List> localVarResponse = wgAdminControllerFindAllWithHttpInfo(wgId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > wgAdminControllerFindAllWithHttpInfo (String wgId)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerFindAll");

            var localVarPath = "/v1/wgs/{wgId}/admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerFindAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>List</returns>
        public List wgAdminControllerFindAllAtPhase (String wgId, Integer phase)
        {
             ApiResponse<List> localVarResponse = wgAdminControllerFindAllAtPhaseWithHttpInfo(wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > wgAdminControllerFindAllAtPhaseWithHttpInfo (String wgId, Integer phase)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerFindAllAtPhase");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerFindAllAtPhase");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerFindAllAtPhase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(array)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>WgAdminDto</returns>
        public WgAdminDto wgAdminControllerFindOne (String wgId, Integer phase, String id)
        {
             ApiResponse<WgAdminDto> localVarResponse = wgAdminControllerFindOneWithHttpInfo(wgId, phase, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        public ApiResponse< WgAdminDto > wgAdminControllerFindOneWithHttpInfo (String wgId, Integer phase, String id)
        {
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerFindOne");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerFindOne");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WgAdminApi->wgAdminControllerFindOne");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerFindOne", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgAdminDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgAdminDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgAdminDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns></returns>
        public void wgAdminControllerPatchOne (UpdateWgAdminDto body, String wgId, Integer phase, String id)
        {
             wgAdminControllerPatchOneWithHttpInfo(body, wgId, phase, id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">Wargame id</param>
        /// <param name="phase">Phase number</param>
        /// <param name="id">unique timeuuid</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> wgAdminControllerPatchOneWithHttpInfo (UpdateWgAdminDto body, String wgId, Integer phase, String id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgAdminApi->wgAdminControllerPatchOne");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerPatchOne");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerPatchOne");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WgAdminApi->wgAdminControllerPatchOne");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerPatchOne", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        public WgAdminDto wgAdminControllerPostHandleConstructionsWgAdmin (CreateHandleConstructionsWgAdminDto body, String wgId, Integer phase)
        {
             ApiResponse<WgAdminDto> localVarResponse = wgAdminControllerPostHandleConstructionsWgAdminWithHttpInfo(body, wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        public ApiResponse< WgAdminDto > wgAdminControllerPostHandleConstructionsWgAdminWithHttpInfo (CreateHandleConstructionsWgAdminDto body, String wgId, Integer phase)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgAdminApi->wgAdminControllerPostHandleConstructionsWgAdmin");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerPostHandleConstructionsWgAdmin");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerPostHandleConstructionsWgAdmin");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/handleConstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerPostHandleConstructionsWgAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgAdminDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgAdminDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgAdminDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        public WgAdminDto wgAdminControllerPostHandleCurrenciesWgAdmin (CreateHandleCurrenciesWgAdminDto body, String wgId, Integer phase)
        {
             ApiResponse<WgAdminDto> localVarResponse = wgAdminControllerPostHandleCurrenciesWgAdminWithHttpInfo(body, wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        public ApiResponse< WgAdminDto > wgAdminControllerPostHandleCurrenciesWgAdminWithHttpInfo (CreateHandleCurrenciesWgAdminDto body, String wgId, Integer phase)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgAdminApi->wgAdminControllerPostHandleCurrenciesWgAdmin");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerPostHandleCurrenciesWgAdmin");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerPostHandleCurrenciesWgAdmin");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/handleCurrencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerPostHandleCurrenciesWgAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgAdminDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgAdminDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgAdminDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        public WgAdminDto wgAdminControllerPostHandleRessourcesWgAdmin (CreateHandleRessourcesWgAdminDto body, String wgId, Integer phase)
        {
             ApiResponse<WgAdminDto> localVarResponse = wgAdminControllerPostHandleRessourcesWgAdminWithHttpInfo(body, wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        public ApiResponse< WgAdminDto > wgAdminControllerPostHandleRessourcesWgAdminWithHttpInfo (CreateHandleRessourcesWgAdminDto body, String wgId, Integer phase)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgAdminApi->wgAdminControllerPostHandleRessourcesWgAdmin");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerPostHandleRessourcesWgAdmin");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerPostHandleRessourcesWgAdmin");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/handleRessources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerPostHandleRessourcesWgAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgAdminDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgAdminDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgAdminDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        public WgAdminDto wgAdminControllerPostSetInfraTypeWgAdmin (CreateSetInfraTypeWgAdminDto body, String wgId, Integer phase)
        {
             ApiResponse<WgAdminDto> localVarResponse = wgAdminControllerPostSetInfraTypeWgAdminWithHttpInfo(body, wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        public ApiResponse< WgAdminDto > wgAdminControllerPostSetInfraTypeWgAdminWithHttpInfo (CreateSetInfraTypeWgAdminDto body, String wgId, Integer phase)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgAdminApi->wgAdminControllerPostSetInfraTypeWgAdmin");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerPostSetInfraTypeWgAdmin");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerPostSetInfraTypeWgAdmin");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/setInfraType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerPostSetInfraTypeWgAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgAdminDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgAdminDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgAdminDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>WgAdminDto</returns>
        public WgAdminDto wgAdminControllerPostSetTerritoryOwnerWgAdmin (CreateSetTerritoryOwnerWgAdminDto body, String wgId, Integer phase)
        {
             ApiResponse<WgAdminDto> localVarResponse = wgAdminControllerPostSetTerritoryOwnerWgAdminWithHttpInfo(body, wgId, phase);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UnityBestHttp2Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="wgId">ID of the Wargame</param>
        /// <param name="phase">Phase number</param>
        /// <returns>ApiResponse of WgAdminDto</returns>
        public ApiResponse< WgAdminDto > wgAdminControllerPostSetTerritoryOwnerWgAdminWithHttpInfo (CreateSetTerritoryOwnerWgAdminDto body, String wgId, Integer phase)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WgAdminApi->wgAdminControllerPostSetTerritoryOwnerWgAdmin");
            // verify the required parameter 'wgId' is set
            if (wgId == null)
                throw new ApiException(400, "Missing required parameter 'wgId' when calling WgAdminApi->wgAdminControllerPostSetTerritoryOwnerWgAdmin");
            // verify the required parameter 'phase' is set
            if (phase == null)
                throw new ApiException(400, "Missing required parameter 'phase' when calling WgAdminApi->wgAdminControllerPostSetTerritoryOwnerWgAdmin");

            var localVarPath = "/v1/wgs/{wgId}/admins/phase/{phase}/setTerritoryOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wgId != null) localVarPathParams.Add("wgId", this.Configuration.ApiClient.ParameterToString(wgId)); // path parameter
            if (phase != null) localVarPathParams.Add("phase", this.Configuration.ApiClient.ParameterToString(phase)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (bearer) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("wgAdminControllerPostSetTerritoryOwnerWgAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WgAdminDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WgAdminDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WgAdminDto)));
        }

    }
}

/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgTerritoryStateModel
    /// </summary>
    [DataContract]
        public partial class WgTerritoryStateModel :  IEquatable<WgTerritoryStateModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgTerritoryStateModel" /> class.
        /// </summary>
        /// <param name="">Optional player index of owner of the territory, empty if neutral (default to null).</param>
        /// <param name="">Number of infrastructure slots (required) (default to null).</param>
        /// <param name="">Total territory population (required) (default to null).</param>
        /// <param name="">Current available territory population (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name="">List of all ressources (required) (default to null).</param>
        /// <param name="">List of all mines and their population (default to null).</param>
        /// <param name="">Map of all infraStates by slotID (required) (default to null).</param>
        /// <param name="">Map of constructions amount by ConstructionType (required) (default to null).</param>
        /// <param name="">Troop state of the territory by playerIndex (required) (default to null).</param>
        public WgTerritoryStateModel(Integer  = null, Integer  = null, Integer  = null, Integer  = null, FortifyStatus  = null, Map  = null, Map  = null, Map  = null, Map  = null, Map  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.slots = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.population = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.availablePop = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.fortifyStatus = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.ressources = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.infraStates = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.consAmount = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgTerritoryStateModel and cannot be null");
            }
            else
            {
                this.troopStates = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.ownerIndex = null;
            }
            else
            {
                this.ownerIndex = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.mines = null;
            }
            else
            {
                this.mines = ;
            }
        }
        
        /// <summary>
        /// Optional player index of owner of the territory, empty if neutral
        /// </summary>
        /// <value>Optional player index of owner of the territory, empty if neutral</value>
        [DataMember(Name="ownerIndex", EmitDefaultValue=)]
        public Integer ownerIndex { get; set; }

        /// <summary>
        /// Number of infrastructure slots
        /// </summary>
        /// <value>Number of infrastructure slots</value>
        [DataMember(Name="slots", EmitDefaultValue=)]
        public Integer slots { get; set; }

        /// <summary>
        /// Total territory population
        /// </summary>
        /// <value>Total territory population</value>
        [DataMember(Name="population", EmitDefaultValue=)]
        public Integer population { get; set; }

        /// <summary>
        /// Current available territory population
        /// </summary>
        /// <value>Current available territory population</value>
        [DataMember(Name="availablePop", EmitDefaultValue=)]
        public Integer availablePop { get; set; }

        /// <summary>
        /// Gets or Sets fortifyStatus
        /// </summary>
        [DataMember(Name="fortifyStatus", EmitDefaultValue=)]
        public FortifyStatus fortifyStatus { get; set; }

        /// <summary>
        /// List of all ressources
        /// </summary>
        /// <value>List of all ressources</value>
        [DataMember(Name="ressources", EmitDefaultValue=)]
        public Map ressources { get; set; }

        /// <summary>
        /// List of all mines and their population
        /// </summary>
        /// <value>List of all mines and their population</value>
        [DataMember(Name="mines", EmitDefaultValue=)]
        public Map mines { get; set; }

        /// <summary>
        /// Map of all infraStates by slotID
        /// </summary>
        /// <value>Map of all infraStates by slotID</value>
        [DataMember(Name="infraStates", EmitDefaultValue=)]
        public Map infraStates { get; set; }

        /// <summary>
        /// Map of constructions amount by ConstructionType
        /// </summary>
        /// <value>Map of constructions amount by ConstructionType</value>
        [DataMember(Name="consAmount", EmitDefaultValue=)]
        public Map consAmount { get; set; }

        /// <summary>
        /// Troop state of the territory by playerIndex
        /// </summary>
        /// <value>Troop state of the territory by playerIndex</value>
        [DataMember(Name="troopStates", EmitDefaultValue=)]
        public Map troopStates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgTerritoryStateModel {\n");
            sb.Append("  ownerIndex: ").Append(ownerIndex).Append("\n");
            sb.Append("  slots: ").Append(slots).Append("\n");
            sb.Append("  population: ").Append(population).Append("\n");
            sb.Append("  availablePop: ").Append(availablePop).Append("\n");
            sb.Append("  fortifyStatus: ").Append(fortifyStatus).Append("\n");
            sb.Append("  ressources: ").Append(ressources).Append("\n");
            sb.Append("  mines: ").Append(mines).Append("\n");
            sb.Append("  infraStates: ").Append(infraStates).Append("\n");
            sb.Append("  consAmount: ").Append(consAmount).Append("\n");
            sb.Append("  troopStates: ").Append(troopStates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgTerritoryStateModel);
        }

        /// <summary>
        /// Returns true if WgTerritoryStateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WgTerritoryStateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgTerritoryStateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ownerIndex == input.ownerIndex ||
                    (this.ownerIndex != null &&
                    this.ownerIndex.Equals(input.ownerIndex))
                ) && 
                (
                    this.slots == input.slots ||
                    (this.slots != null &&
                    this.slots.Equals(input.slots))
                ) && 
                (
                    this.population == input.population ||
                    (this.population != null &&
                    this.population.Equals(input.population))
                ) && 
                (
                    this.availablePop == input.availablePop ||
                    (this.availablePop != null &&
                    this.availablePop.Equals(input.availablePop))
                ) && 
                (
                    this.fortifyStatus == input.fortifyStatus ||
                    (this.fortifyStatus != null &&
                    this.fortifyStatus.Equals(input.fortifyStatus))
                ) && 
                (
                    this.ressources == input.ressources ||
                    this.ressources != null &&
                    this.ressources.SequenceEqual(input.ressources)
                ) && 
                (
                    this.mines == input.mines ||
                    this.mines != null &&
                    this.mines.SequenceEqual(input.mines)
                ) && 
                (
                    this.infraStates == input.infraStates ||
                    this.infraStates != null &&
                    this.infraStates.SequenceEqual(input.infraStates)
                ) && 
                (
                    this.consAmount == input.consAmount ||
                    this.consAmount != null &&
                    this.consAmount.SequenceEqual(input.consAmount)
                ) && 
                (
                    this.troopStates == input.troopStates ||
                    this.troopStates != null &&
                    this.troopStates.SequenceEqual(input.troopStates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ownerIndex != null)
                    hashCode = hashCode * 59 + this.ownerIndex.GetHashCode();
                if (this.slots != null)
                    hashCode = hashCode * 59 + this.slots.GetHashCode();
                if (this.population != null)
                    hashCode = hashCode * 59 + this.population.GetHashCode();
                if (this.availablePop != null)
                    hashCode = hashCode * 59 + this.availablePop.GetHashCode();
                if (this.fortifyStatus != null)
                    hashCode = hashCode * 59 + this.fortifyStatus.GetHashCode();
                if (this.ressources != null)
                    hashCode = hashCode * 59 + this.ressources.GetHashCode();
                if (this.mines != null)
                    hashCode = hashCode * 59 + this.mines.GetHashCode();
                if (this.infraStates != null)
                    hashCode = hashCode * 59 + this.infraStates.GetHashCode();
                if (this.consAmount != null)
                    hashCode = hashCode * 59 + this.consAmount.GetHashCode();
                if (this.troopStates != null)
                    hashCode = hashCode * 59 + this.troopStates.GetHashCode();
                return hashCode;
            }
        }

    }
}

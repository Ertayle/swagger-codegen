/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgWinLoseParameters
    /// </summary>
    [DataContract]
        public partial class WgWinLoseParameters :  IEquatable<WgWinLoseParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgWinLoseParameters" /> class.
        /// </summary>
        /// <param name="">List of global win conditions (default to null).</param>
        /// <param name="">List of global lose conditions (default to null).</param>
        /// <param name="">List of per playerIndex win conditions (default to null).</param>
        /// <param name="">List of per playerIndex lose conditions (default to null).</param>
        public WgWinLoseParameters(List  = null, List  = null, Map  = null, Map  = null, )
        {
            // use default value if no "" provided
            if ( == null)
            {
                this.globalWinConditions = null;
            }
            else
            {
                this.globalWinConditions = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.globalLoseConditions = null;
            }
            else
            {
                this.globalLoseConditions = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.perIndexWinConditions = null;
            }
            else
            {
                this.perIndexWinConditions = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.perIndexLoseConditions = null;
            }
            else
            {
                this.perIndexLoseConditions = ;
            }
        }
        
        /// <summary>
        /// List of global win conditions
        /// </summary>
        /// <value>List of global win conditions</value>
        [DataMember(Name="globalWinConditions", EmitDefaultValue=)]
        public List globalWinConditions { get; set; }

        /// <summary>
        /// List of global lose conditions
        /// </summary>
        /// <value>List of global lose conditions</value>
        [DataMember(Name="globalLoseConditions", EmitDefaultValue=)]
        public List globalLoseConditions { get; set; }

        /// <summary>
        /// List of per playerIndex win conditions
        /// </summary>
        /// <value>List of per playerIndex win conditions</value>
        [DataMember(Name="perIndexWinConditions", EmitDefaultValue=)]
        public Map perIndexWinConditions { get; set; }

        /// <summary>
        /// List of per playerIndex lose conditions
        /// </summary>
        /// <value>List of per playerIndex lose conditions</value>
        [DataMember(Name="perIndexLoseConditions", EmitDefaultValue=)]
        public Map perIndexLoseConditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgWinLoseParameters {\n");
            sb.Append("  globalWinConditions: ").Append(globalWinConditions).Append("\n");
            sb.Append("  globalLoseConditions: ").Append(globalLoseConditions).Append("\n");
            sb.Append("  perIndexWinConditions: ").Append(perIndexWinConditions).Append("\n");
            sb.Append("  perIndexLoseConditions: ").Append(perIndexLoseConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgWinLoseParameters);
        }

        /// <summary>
        /// Returns true if WgWinLoseParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of WgWinLoseParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgWinLoseParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.globalWinConditions == input.globalWinConditions ||
                    this.globalWinConditions != null &&
                    this.globalWinConditions.SequenceEqual(input.globalWinConditions)
                ) && 
                (
                    this.globalLoseConditions == input.globalLoseConditions ||
                    this.globalLoseConditions != null &&
                    this.globalLoseConditions.SequenceEqual(input.globalLoseConditions)
                ) && 
                (
                    this.perIndexWinConditions == input.perIndexWinConditions ||
                    this.perIndexWinConditions != null &&
                    this.perIndexWinConditions.SequenceEqual(input.perIndexWinConditions)
                ) && 
                (
                    this.perIndexLoseConditions == input.perIndexLoseConditions ||
                    this.perIndexLoseConditions != null &&
                    this.perIndexLoseConditions.SequenceEqual(input.perIndexLoseConditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.globalWinConditions != null)
                    hashCode = hashCode * 59 + this.globalWinConditions.GetHashCode();
                if (this.globalLoseConditions != null)
                    hashCode = hashCode * 59 + this.globalLoseConditions.GetHashCode();
                if (this.perIndexWinConditions != null)
                    hashCode = hashCode * 59 + this.perIndexWinConditions.GetHashCode();
                if (this.perIndexLoseConditions != null)
                    hashCode = hashCode * 59 + this.perIndexLoseConditions.GetHashCode();
                return hashCode;
            }
        }

    }
}

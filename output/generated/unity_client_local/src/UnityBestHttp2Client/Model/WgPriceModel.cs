/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgPriceModel
    /// </summary>
    [DataContract]
        public partial class WgPriceModel :  IEquatable<WgPriceModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgPriceModel" /> class.
        /// </summary>
        /// <param name="">Describes the price of something (required) (default to null).</param>
        public WgPriceModel(Map  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgPriceModel and cannot be null");
            }
            else
            {
                this.cost = ;
            }
        }
        
        /// <summary>
        /// Describes the price of something
        /// </summary>
        /// <value>Describes the price of something</value>
        [DataMember(Name="cost", EmitDefaultValue=)]
        public Map cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgPriceModel {\n");
            sb.Append("  cost: ").Append(cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgPriceModel);
        }

        /// <summary>
        /// Returns true if WgPriceModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WgPriceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgPriceModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.cost == input.cost ||
                    this.cost != null &&
                    this.cost.SequenceEqual(input.cost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.cost != null)
                    hashCode = hashCode * 59 + this.cost.GetHashCode();
                return hashCode;
            }
        }

    }
}

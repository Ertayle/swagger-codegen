/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// Enums
    /// </summary>
    [DataContract]
        public partial class Enums :  IEquatable<Enums>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Enums" /> class.
        /// </summary>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        public Enums(InfraType  = null, ConstructionType  = null, OrderType  = null, RessourceType  = null, CurrencyType  = null, CurrencyType  = null, UnitType  = null, AttackTargetType  = null, OrderStatus  = null, FortifyStatus  = null, WgAdminType  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.InfraType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.ConstructionType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.OrderType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.RessourceType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.CurrencyType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.currencyTypeEnum = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.UnitType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.PoundType = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.OrderStatus = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.FortifyStatus = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for Enums and cannot be null");
            }
            else
            {
                this.WgAdminType = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets InfraType
        /// </summary>
        [DataMember(Name="InfraType", EmitDefaultValue=)]
        public InfraType InfraType { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionType
        /// </summary>
        [DataMember(Name="ConstructionType", EmitDefaultValue=)]
        public ConstructionType ConstructionType { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name="OrderType", EmitDefaultValue=)]
        public OrderType OrderType { get; set; }

        /// <summary>
        /// Gets or Sets RessourceType
        /// </summary>
        [DataMember(Name="RessourceType", EmitDefaultValue=)]
        public RessourceType RessourceType { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name="CurrencyType", EmitDefaultValue=)]
        public CurrencyType CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets currencyTypeEnum
        /// </summary>
        [DataMember(Name="currencyTypeEnum", EmitDefaultValue=)]
        public CurrencyType currencyTypeEnum { get; set; }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name="UnitType", EmitDefaultValue=)]
        public UnitType UnitType { get; set; }

        /// <summary>
        /// Gets or Sets PoundType
        /// </summary>
        [DataMember(Name="PoundType", EmitDefaultValue=)]
        public AttackTargetType PoundType { get; set; }

        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name="OrderStatus", EmitDefaultValue=)]
        public OrderStatus OrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets FortifyStatus
        /// </summary>
        [DataMember(Name="FortifyStatus", EmitDefaultValue=)]
        public FortifyStatus FortifyStatus { get; set; }

        /// <summary>
        /// Gets or Sets WgAdminType
        /// </summary>
        [DataMember(Name="WgAdminType", EmitDefaultValue=)]
        public WgAdminType WgAdminType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Enums {\n");
            sb.Append("  InfraType: ").Append(InfraType).Append("\n");
            sb.Append("  ConstructionType: ").Append(ConstructionType).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  RessourceType: ").Append(RessourceType).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  currencyTypeEnum: ").Append(currencyTypeEnum).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  PoundType: ").Append(PoundType).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  FortifyStatus: ").Append(FortifyStatus).Append("\n");
            sb.Append("  WgAdminType: ").Append(WgAdminType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Enums);
        }

        /// <summary>
        /// Returns true if Enums instances are equal
        /// </summary>
        /// <param name="input">Instance of Enums to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Enums input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InfraType == input.InfraType ||
                    (this.InfraType != null &&
                    this.InfraType.Equals(input.InfraType))
                ) && 
                (
                    this.ConstructionType == input.ConstructionType ||
                    (this.ConstructionType != null &&
                    this.ConstructionType.Equals(input.ConstructionType))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.RessourceType == input.RessourceType ||
                    (this.RessourceType != null &&
                    this.RessourceType.Equals(input.RessourceType))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    (this.CurrencyType != null &&
                    this.CurrencyType.Equals(input.CurrencyType))
                ) && 
                (
                    this.currencyTypeEnum == input.currencyTypeEnum ||
                    (this.currencyTypeEnum != null &&
                    this.currencyTypeEnum.Equals(input.currencyTypeEnum))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.PoundType == input.PoundType ||
                    (this.PoundType != null &&
                    this.PoundType.Equals(input.PoundType))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.FortifyStatus == input.FortifyStatus ||
                    (this.FortifyStatus != null &&
                    this.FortifyStatus.Equals(input.FortifyStatus))
                ) && 
                (
                    this.WgAdminType == input.WgAdminType ||
                    (this.WgAdminType != null &&
                    this.WgAdminType.Equals(input.WgAdminType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InfraType != null)
                    hashCode = hashCode * 59 + this.InfraType.GetHashCode();
                if (this.ConstructionType != null)
                    hashCode = hashCode * 59 + this.ConstructionType.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.RessourceType != null)
                    hashCode = hashCode * 59 + this.RessourceType.GetHashCode();
                if (this.CurrencyType != null)
                    hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                if (this.currencyTypeEnum != null)
                    hashCode = hashCode * 59 + this.currencyTypeEnum.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.PoundType != null)
                    hashCode = hashCode * 59 + this.PoundType.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.FortifyStatus != null)
                    hashCode = hashCode * 59 + this.FortifyStatus.GetHashCode();
                if (this.WgAdminType != null)
                    hashCode = hashCode * 59 + this.WgAdminType.GetHashCode();
                return hashCode;
            }
        }

    }
}

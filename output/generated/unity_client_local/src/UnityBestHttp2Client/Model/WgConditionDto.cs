/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgConditionDto
    /// </summary>
    [DataContract]
        public partial class WgConditionDto :  IEquatable<WgConditionDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgConditionDto" /> class.
        /// </summary>
        /// <param name=""> (default to null).</param>
        /// <param name="">Invert condition ? (default to null).</param>
        /// <param name="">Territory label (default to null).</param>
        /// <param name="">Amount (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        public WgConditionDto(WgConditionType  = null, Boolean  = null, String  = null, Integer  = null, InfraType  = null, UnitType  = null, RessourceType  = null, CurrencyType  = null, )
        {
            // use default value if no "" provided
            if ( == null)
            {
                this.type = null;
            }
            else
            {
                this.type = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.invert = null;
            }
            else
            {
                this.invert = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.territoryLabel = null;
            }
            else
            {
                this.territoryLabel = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.amount = null;
            }
            else
            {
                this.amount = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.infraType = null;
            }
            else
            {
                this.infraType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.unitType = null;
            }
            else
            {
                this.unitType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.ressourceType = null;
            }
            else
            {
                this.ressourceType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.currencyType = null;
            }
            else
            {
                this.currencyType = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=)]
        public WgConditionType type { get; set; }

        /// <summary>
        /// Invert condition ?
        /// </summary>
        /// <value>Invert condition ?</value>
        [DataMember(Name="invert", EmitDefaultValue=)]
        public Boolean invert { get; set; }

        /// <summary>
        /// Territory label
        /// </summary>
        /// <value>Territory label</value>
        [DataMember(Name="territoryLabel", EmitDefaultValue=)]
        public String territoryLabel { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="amount", EmitDefaultValue=)]
        public Integer amount { get; set; }

        /// <summary>
        /// Gets or Sets infraType
        /// </summary>
        [DataMember(Name="infraType", EmitDefaultValue=)]
        public InfraType infraType { get; set; }

        /// <summary>
        /// Gets or Sets unitType
        /// </summary>
        [DataMember(Name="unitType", EmitDefaultValue=)]
        public UnitType unitType { get; set; }

        /// <summary>
        /// Gets or Sets ressourceType
        /// </summary>
        [DataMember(Name="ressourceType", EmitDefaultValue=)]
        public RessourceType ressourceType { get; set; }

        /// <summary>
        /// Gets or Sets currencyType
        /// </summary>
        [DataMember(Name="currencyType", EmitDefaultValue=)]
        public CurrencyType currencyType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgConditionDto {\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  invert: ").Append(invert).Append("\n");
            sb.Append("  territoryLabel: ").Append(territoryLabel).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  infraType: ").Append(infraType).Append("\n");
            sb.Append("  unitType: ").Append(unitType).Append("\n");
            sb.Append("  ressourceType: ").Append(ressourceType).Append("\n");
            sb.Append("  currencyType: ").Append(currencyType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgConditionDto);
        }

        /// <summary>
        /// Returns true if WgConditionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WgConditionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgConditionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.invert == input.invert ||
                    (this.invert != null &&
                    this.invert.Equals(input.invert))
                ) && 
                (
                    this.territoryLabel == input.territoryLabel ||
                    (this.territoryLabel != null &&
                    this.territoryLabel.Equals(input.territoryLabel))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.infraType == input.infraType ||
                    (this.infraType != null &&
                    this.infraType.Equals(input.infraType))
                ) && 
                (
                    this.unitType == input.unitType ||
                    (this.unitType != null &&
                    this.unitType.Equals(input.unitType))
                ) && 
                (
                    this.ressourceType == input.ressourceType ||
                    (this.ressourceType != null &&
                    this.ressourceType.Equals(input.ressourceType))
                ) && 
                (
                    this.currencyType == input.currencyType ||
                    (this.currencyType != null &&
                    this.currencyType.Equals(input.currencyType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.invert != null)
                    hashCode = hashCode * 59 + this.invert.GetHashCode();
                if (this.territoryLabel != null)
                    hashCode = hashCode * 59 + this.territoryLabel.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.infraType != null)
                    hashCode = hashCode * 59 + this.infraType.GetHashCode();
                if (this.unitType != null)
                    hashCode = hashCode * 59 + this.unitType.GetHashCode();
                if (this.ressourceType != null)
                    hashCode = hashCode * 59 + this.ressourceType.GetHashCode();
                if (this.currencyType != null)
                    hashCode = hashCode * 59 + this.currencyType.GetHashCode();
                return hashCode;
            }
        }

    }
}

/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgComplexParameters
    /// </summary>
    [DataContract]
        public partial class WgComplexParameters :  IEquatable<WgComplexParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgComplexParameters" /> class.
        /// </summary>
        /// <param name="">Infra properties (required) (default to null).</param>
        /// <param name="">Construction properties (required) (default to null).</param>
        /// <param name="">Mine properties (required) (default to null).</param>
        /// <param name="">Unit properties (required) (default to null).</param>
        public WgComplexParameters(Map  = null, Map  = null, Map  = null, Map  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgComplexParameters and cannot be null");
            }
            else
            {
                this.infraParameters = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgComplexParameters and cannot be null");
            }
            else
            {
                this.constructionParameters = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgComplexParameters and cannot be null");
            }
            else
            {
                this.mineParameters = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgComplexParameters and cannot be null");
            }
            else
            {
                this.unitParameters = ;
            }
        }
        
        /// <summary>
        /// Infra properties
        /// </summary>
        /// <value>Infra properties</value>
        [DataMember(Name="infraParameters", EmitDefaultValue=)]
        public Map infraParameters { get; set; }

        /// <summary>
        /// Construction properties
        /// </summary>
        /// <value>Construction properties</value>
        [DataMember(Name="constructionParameters", EmitDefaultValue=)]
        public Map constructionParameters { get; set; }

        /// <summary>
        /// Mine properties
        /// </summary>
        /// <value>Mine properties</value>
        [DataMember(Name="mineParameters", EmitDefaultValue=)]
        public Map mineParameters { get; set; }

        /// <summary>
        /// Unit properties
        /// </summary>
        /// <value>Unit properties</value>
        [DataMember(Name="unitParameters", EmitDefaultValue=)]
        public Map unitParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgComplexParameters {\n");
            sb.Append("  infraParameters: ").Append(infraParameters).Append("\n");
            sb.Append("  constructionParameters: ").Append(constructionParameters).Append("\n");
            sb.Append("  mineParameters: ").Append(mineParameters).Append("\n");
            sb.Append("  unitParameters: ").Append(unitParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgComplexParameters);
        }

        /// <summary>
        /// Returns true if WgComplexParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of WgComplexParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgComplexParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.infraParameters == input.infraParameters ||
                    this.infraParameters != null &&
                    this.infraParameters.SequenceEqual(input.infraParameters)
                ) && 
                (
                    this.constructionParameters == input.constructionParameters ||
                    this.constructionParameters != null &&
                    this.constructionParameters.SequenceEqual(input.constructionParameters)
                ) && 
                (
                    this.mineParameters == input.mineParameters ||
                    this.mineParameters != null &&
                    this.mineParameters.SequenceEqual(input.mineParameters)
                ) && 
                (
                    this.unitParameters == input.unitParameters ||
                    this.unitParameters != null &&
                    this.unitParameters.SequenceEqual(input.unitParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.infraParameters != null)
                    hashCode = hashCode * 59 + this.infraParameters.GetHashCode();
                if (this.constructionParameters != null)
                    hashCode = hashCode * 59 + this.constructionParameters.GetHashCode();
                if (this.mineParameters != null)
                    hashCode = hashCode * 59 + this.mineParameters.GetHashCode();
                if (this.unitParameters != null)
                    hashCode = hashCode * 59 + this.unitParameters.GetHashCode();
                return hashCode;
            }
        }

    }
}

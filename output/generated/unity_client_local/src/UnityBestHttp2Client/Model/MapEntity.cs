/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// MapEntity
    /// </summary>
    [DataContract]
        public partial class MapEntity :  IEquatable<MapEntity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MapEntity" /> class.
        /// </summary>
        /// <param name=""> (required) (default to null).</param>
        /// <param name="">Map type name (required) (default to null).</param>
        /// <param name="">Version string of the Map to handle multiple versions of Maps during games (required) (default to default).</param>
        /// <param name="">Dictionnary of startig currencies (required) (default to null).</param>
        /// <param name="">Initial States of all Territories of the Map (required) (default to null).</param>
        /// <param name="">List of Strategic states for this Map (required) (default to null).</param>
        /// <param name="">List of HQ for this Map. Attached to the Users by order in the list       corresponding to WgModel objects (required) (default to null).</param>
        /// <param name="">List of Map routes. This field is an oriented graph (required) (default to null).</param>
        public MapEntity(String  = null, String  = null, String  = default, Map  = null, Map  = null, List  = null, List  = null, Map  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.id = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.mapName = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.version = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.startingCurrencies = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.initialTerritoryStates = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.strategicStates = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.hqs = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for MapEntity and cannot be null");
            }
            else
            {
                this.routes = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=)]
        public String id { get; set; }

        /// <summary>
        /// Map type name
        /// </summary>
        /// <value>Map type name</value>
        [DataMember(Name="mapName", EmitDefaultValue=)]
        public String mapName { get; set; }

        /// <summary>
        /// Version string of the Map to handle multiple versions of Maps during games
        /// </summary>
        /// <value>Version string of the Map to handle multiple versions of Maps during games</value>
        [DataMember(Name="version", EmitDefaultValue=)]
        public String version { get; set; }

        /// <summary>
        /// Dictionnary of startig currencies
        /// </summary>
        /// <value>Dictionnary of startig currencies</value>
        [DataMember(Name="startingCurrencies", EmitDefaultValue=)]
        public Map startingCurrencies { get; set; }

        /// <summary>
        /// Initial States of all Territories of the Map
        /// </summary>
        /// <value>Initial States of all Territories of the Map</value>
        [DataMember(Name="initialTerritoryStates", EmitDefaultValue=)]
        public Map initialTerritoryStates { get; set; }

        /// <summary>
        /// List of Strategic states for this Map
        /// </summary>
        /// <value>List of Strategic states for this Map</value>
        [DataMember(Name="strategicStates", EmitDefaultValue=)]
        public List strategicStates { get; set; }

        /// <summary>
        /// List of HQ for this Map. Attached to the Users by order in the list       corresponding to WgModel objects
        /// </summary>
        /// <value>List of HQ for this Map. Attached to the Users by order in the list       corresponding to WgModel objects</value>
        [DataMember(Name="hqs", EmitDefaultValue=)]
        public List hqs { get; set; }

        /// <summary>
        /// List of Map routes. This field is an oriented graph
        /// </summary>
        /// <value>List of Map routes. This field is an oriented graph</value>
        [DataMember(Name="routes", EmitDefaultValue=)]
        public Map routes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MapEntity {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  mapName: ").Append(mapName).Append("\n");
            sb.Append("  version: ").Append(version).Append("\n");
            sb.Append("  startingCurrencies: ").Append(startingCurrencies).Append("\n");
            sb.Append("  initialTerritoryStates: ").Append(initialTerritoryStates).Append("\n");
            sb.Append("  strategicStates: ").Append(strategicStates).Append("\n");
            sb.Append("  hqs: ").Append(hqs).Append("\n");
            sb.Append("  routes: ").Append(routes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MapEntity);
        }

        /// <summary>
        /// Returns true if MapEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of MapEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.mapName == input.mapName ||
                    (this.mapName != null &&
                    this.mapName.Equals(input.mapName))
                ) && 
                (
                    this.version == input.version ||
                    (this.version != null &&
                    this.version.Equals(input.version))
                ) && 
                (
                    this.startingCurrencies == input.startingCurrencies ||
                    this.startingCurrencies != null &&
                    this.startingCurrencies.SequenceEqual(input.startingCurrencies)
                ) && 
                (
                    this.initialTerritoryStates == input.initialTerritoryStates ||
                    this.initialTerritoryStates != null &&
                    this.initialTerritoryStates.SequenceEqual(input.initialTerritoryStates)
                ) && 
                (
                    this.strategicStates == input.strategicStates ||
                    this.strategicStates != null &&
                    this.strategicStates.SequenceEqual(input.strategicStates)
                ) && 
                (
                    this.hqs == input.hqs ||
                    this.hqs != null &&
                    this.hqs.SequenceEqual(input.hqs)
                ) && 
                (
                    this.routes == input.routes ||
                    this.routes != null &&
                    this.routes.SequenceEqual(input.routes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.mapName != null)
                    hashCode = hashCode * 59 + this.mapName.GetHashCode();
                if (this.version != null)
                    hashCode = hashCode * 59 + this.version.GetHashCode();
                if (this.startingCurrencies != null)
                    hashCode = hashCode * 59 + this.startingCurrencies.GetHashCode();
                if (this.initialTerritoryStates != null)
                    hashCode = hashCode * 59 + this.initialTerritoryStates.GetHashCode();
                if (this.strategicStates != null)
                    hashCode = hashCode * 59 + this.strategicStates.GetHashCode();
                if (this.hqs != null)
                    hashCode = hashCode * 59 + this.hqs.GetHashCode();
                if (this.routes != null)
                    hashCode = hashCode * 59 + this.routes.GetHashCode();
                return hashCode;
            }
        }

    }
}

/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgEntity
    /// </summary>
    [DataContract]
        public partial class WgEntity :  IEquatable<WgEntity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgEntity" /> class.
        /// </summary>
        /// <param name="">Wargame ID (required) (default to null).</param>
        /// <param name="">Name of the Planet for this WG (required) (default to null).</param>
        /// <param name="">Name of the Map (required) (default to null).</param>
        /// <param name="">Version of the Map (required) (default to null).</param>
        /// <param name="">Wargame seed (required) (default to null).</param>
        /// <param name="">Creation date (default to null).</param>
        /// <param name="">Update date (default to null).</param>
        /// <param name="">Start date of the Wargame (default to null).</param>
        /// <param name="">Current WG Phase (required) (default to null).</param>
        /// <param name="">Stores all Users that initially took part to the     Wargame. If user is dead, it can only be known by     checking the WgStateModel, thus it is recommanded     to add an ingame marker to the User to handle the     information if a WG is on, or not for a User (required) (default to null).</param>
        /// <param name=""> (default to null).</param>
        public WgEntity(String  = null, String  = null, String  = null, String  = null, String  = null, Date  = null, Date  = null, Date  = null, Integer  = null, List  = null, WgParameters  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.id = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.planetName = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.mapName = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.mapVersion = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.seed = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.currentPhase = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgEntity and cannot be null");
            }
            else
            {
                this.users = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.createdAt = null;
            }
            else
            {
                this.createdAt = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.updatedAt = null;
            }
            else
            {
                this.updatedAt = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.startedAt = null;
            }
            else
            {
                this.startedAt = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.overrideParameters = null;
            }
            else
            {
                this.overrideParameters = ;
            }
        }
        
        /// <summary>
        /// Wargame ID
        /// </summary>
        /// <value>Wargame ID</value>
        [DataMember(Name="id", EmitDefaultValue=)]
        public String id { get; set; }

        /// <summary>
        /// Name of the Planet for this WG
        /// </summary>
        /// <value>Name of the Planet for this WG</value>
        [DataMember(Name="planetName", EmitDefaultValue=)]
        public String planetName { get; set; }

        /// <summary>
        /// Name of the Map
        /// </summary>
        /// <value>Name of the Map</value>
        [DataMember(Name="mapName", EmitDefaultValue=)]
        public String mapName { get; set; }

        /// <summary>
        /// Version of the Map
        /// </summary>
        /// <value>Version of the Map</value>
        [DataMember(Name="mapVersion", EmitDefaultValue=)]
        public String mapVersion { get; set; }

        /// <summary>
        /// Wargame seed
        /// </summary>
        /// <value>Wargame seed</value>
        [DataMember(Name="seed", EmitDefaultValue=)]
        public String seed { get; set; }

        /// <summary>
        /// Creation date
        /// </summary>
        /// <value>Creation date</value>
        [DataMember(Name="createdAt", EmitDefaultValue=)]
        public Date createdAt { get; set; }

        /// <summary>
        /// Update date
        /// </summary>
        /// <value>Update date</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=)]
        public Date updatedAt { get; set; }

        /// <summary>
        /// Start date of the Wargame
        /// </summary>
        /// <value>Start date of the Wargame</value>
        [DataMember(Name="startedAt", EmitDefaultValue=)]
        public Date startedAt { get; set; }

        /// <summary>
        /// Current WG Phase
        /// </summary>
        /// <value>Current WG Phase</value>
        [DataMember(Name="currentPhase", EmitDefaultValue=)]
        public Integer currentPhase { get; set; }

        /// <summary>
        /// Stores all Users that initially took part to the     Wargame. If user is dead, it can only be known by     checking the WgStateModel, thus it is recommanded     to add an ingame marker to the User to handle the     information if a WG is on, or not for a User
        /// </summary>
        /// <value>Stores all Users that initially took part to the     Wargame. If user is dead, it can only be known by     checking the WgStateModel, thus it is recommanded     to add an ingame marker to the User to handle the     information if a WG is on, or not for a User</value>
        [DataMember(Name="users", EmitDefaultValue=)]
        public List users { get; set; }

        /// <summary>
        /// Gets or Sets overrideParameters
        /// </summary>
        [DataMember(Name="overrideParameters", EmitDefaultValue=)]
        public WgParameters overrideParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgEntity {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  planetName: ").Append(planetName).Append("\n");
            sb.Append("  mapName: ").Append(mapName).Append("\n");
            sb.Append("  mapVersion: ").Append(mapVersion).Append("\n");
            sb.Append("  seed: ").Append(seed).Append("\n");
            sb.Append("  createdAt: ").Append(createdAt).Append("\n");
            sb.Append("  updatedAt: ").Append(updatedAt).Append("\n");
            sb.Append("  startedAt: ").Append(startedAt).Append("\n");
            sb.Append("  currentPhase: ").Append(currentPhase).Append("\n");
            sb.Append("  users: ").Append(users).Append("\n");
            sb.Append("  overrideParameters: ").Append(overrideParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgEntity);
        }

        /// <summary>
        /// Returns true if WgEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of WgEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.planetName == input.planetName ||
                    (this.planetName != null &&
                    this.planetName.Equals(input.planetName))
                ) && 
                (
                    this.mapName == input.mapName ||
                    (this.mapName != null &&
                    this.mapName.Equals(input.mapName))
                ) && 
                (
                    this.mapVersion == input.mapVersion ||
                    (this.mapVersion != null &&
                    this.mapVersion.Equals(input.mapVersion))
                ) && 
                (
                    this.seed == input.seed ||
                    (this.seed != null &&
                    this.seed.Equals(input.seed))
                ) && 
                (
                    this.createdAt == input.createdAt ||
                    (this.createdAt != null &&
                    this.createdAt.Equals(input.createdAt))
                ) && 
                (
                    this.updatedAt == input.updatedAt ||
                    (this.updatedAt != null &&
                    this.updatedAt.Equals(input.updatedAt))
                ) && 
                (
                    this.startedAt == input.startedAt ||
                    (this.startedAt != null &&
                    this.startedAt.Equals(input.startedAt))
                ) && 
                (
                    this.currentPhase == input.currentPhase ||
                    (this.currentPhase != null &&
                    this.currentPhase.Equals(input.currentPhase))
                ) && 
                (
                    this.users == input.users ||
                    this.users != null &&
                    this.users.SequenceEqual(input.users)
                ) && 
                (
                    this.overrideParameters == input.overrideParameters ||
                    (this.overrideParameters != null &&
                    this.overrideParameters.Equals(input.overrideParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.planetName != null)
                    hashCode = hashCode * 59 + this.planetName.GetHashCode();
                if (this.mapName != null)
                    hashCode = hashCode * 59 + this.mapName.GetHashCode();
                if (this.mapVersion != null)
                    hashCode = hashCode * 59 + this.mapVersion.GetHashCode();
                if (this.seed != null)
                    hashCode = hashCode * 59 + this.seed.GetHashCode();
                if (this.createdAt != null)
                    hashCode = hashCode * 59 + this.createdAt.GetHashCode();
                if (this.updatedAt != null)
                    hashCode = hashCode * 59 + this.updatedAt.GetHashCode();
                if (this.startedAt != null)
                    hashCode = hashCode * 59 + this.startedAt.GetHashCode();
                if (this.currentPhase != null)
                    hashCode = hashCode * 59 + this.currentPhase.GetHashCode();
                if (this.users != null)
                    hashCode = hashCode * 59 + this.users.GetHashCode();
                if (this.overrideParameters != null)
                    hashCode = hashCode * 59 + this.overrideParameters.GetHashCode();
                return hashCode;
            }
        }

    }
}

/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgPlayerStateModel
    /// </summary>
    [DataContract]
        public partial class WgPlayerStateModel :  IEquatable<WgPlayerStateModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgPlayerStateModel" /> class.
        /// </summary>
        /// <param name="">is player active or dead ? (required) (default to null).</param>
        /// <param name="">is player the winner ? (required) (default to null).</param>
        /// <param name="">win/lose tag (default to null).</param>
        /// <param name="">This user owned currencies (required) (default to null).</param>
        /// <param name="">The label of the starting HQ of this player (required) (default to null).</param>
        /// <param name="">Win/Lose condition tracking (default to null).</param>
        public WgPlayerStateModel(Boolean  = null, Boolean  = null, String  = null, Map  = null, String  = null, Map  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgPlayerStateModel and cannot be null");
            }
            else
            {
                this.active = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgPlayerStateModel and cannot be null");
            }
            else
            {
                this.isWinner = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgPlayerStateModel and cannot be null");
            }
            else
            {
                this.currencies = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgPlayerStateModel and cannot be null");
            }
            else
            {
                this.startingHq = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.winLoseTag = null;
            }
            else
            {
                this.winLoseTag = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.conditionCounters = null;
            }
            else
            {
                this.conditionCounters = ;
            }
        }
        
        /// <summary>
        /// is player active or dead ?
        /// </summary>
        /// <value>is player active or dead ?</value>
        [DataMember(Name="active", EmitDefaultValue=)]
        public Boolean active { get; set; }

        /// <summary>
        /// is player the winner ?
        /// </summary>
        /// <value>is player the winner ?</value>
        [DataMember(Name="isWinner", EmitDefaultValue=)]
        public Boolean isWinner { get; set; }

        /// <summary>
        /// win/lose tag
        /// </summary>
        /// <value>win/lose tag</value>
        [DataMember(Name="winLoseTag", EmitDefaultValue=)]
        public String winLoseTag { get; set; }

        /// <summary>
        /// This user owned currencies
        /// </summary>
        /// <value>This user owned currencies</value>
        [DataMember(Name="currencies", EmitDefaultValue=)]
        public Map currencies { get; set; }

        /// <summary>
        /// The label of the starting HQ of this player
        /// </summary>
        /// <value>The label of the starting HQ of this player</value>
        [DataMember(Name="startingHq", EmitDefaultValue=)]
        public String startingHq { get; set; }

        /// <summary>
        /// Win/Lose condition tracking
        /// </summary>
        /// <value>Win/Lose condition tracking</value>
        [DataMember(Name="conditionCounters", EmitDefaultValue=)]
        public Map conditionCounters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgPlayerStateModel {\n");
            sb.Append("  active: ").Append(active).Append("\n");
            sb.Append("  isWinner: ").Append(isWinner).Append("\n");
            sb.Append("  winLoseTag: ").Append(winLoseTag).Append("\n");
            sb.Append("  currencies: ").Append(currencies).Append("\n");
            sb.Append("  startingHq: ").Append(startingHq).Append("\n");
            sb.Append("  conditionCounters: ").Append(conditionCounters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgPlayerStateModel);
        }

        /// <summary>
        /// Returns true if WgPlayerStateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WgPlayerStateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgPlayerStateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.active == input.active ||
                    (this.active != null &&
                    this.active.Equals(input.active))
                ) && 
                (
                    this.isWinner == input.isWinner ||
                    (this.isWinner != null &&
                    this.isWinner.Equals(input.isWinner))
                ) && 
                (
                    this.winLoseTag == input.winLoseTag ||
                    (this.winLoseTag != null &&
                    this.winLoseTag.Equals(input.winLoseTag))
                ) && 
                (
                    this.currencies == input.currencies ||
                    this.currencies != null &&
                    this.currencies.SequenceEqual(input.currencies)
                ) && 
                (
                    this.startingHq == input.startingHq ||
                    (this.startingHq != null &&
                    this.startingHq.Equals(input.startingHq))
                ) && 
                (
                    this.conditionCounters == input.conditionCounters ||
                    this.conditionCounters != null &&
                    this.conditionCounters.SequenceEqual(input.conditionCounters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.active != null)
                    hashCode = hashCode * 59 + this.active.GetHashCode();
                if (this.isWinner != null)
                    hashCode = hashCode * 59 + this.isWinner.GetHashCode();
                if (this.winLoseTag != null)
                    hashCode = hashCode * 59 + this.winLoseTag.GetHashCode();
                if (this.currencies != null)
                    hashCode = hashCode * 59 + this.currencies.GetHashCode();
                if (this.startingHq != null)
                    hashCode = hashCode * 59 + this.startingHq.GetHashCode();
                if (this.conditionCounters != null)
                    hashCode = hashCode * 59 + this.conditionCounters.GetHashCode();
                return hashCode;
            }
        }

    }
}

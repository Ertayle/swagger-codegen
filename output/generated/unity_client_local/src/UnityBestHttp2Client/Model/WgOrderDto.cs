/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgOrderDto
    /// </summary>
    [DataContract]
        public partial class WgOrderDto :  IEquatable<WgOrderDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgOrderDto" /> class.
        /// </summary>
        /// <param name="">Wargame id (required) (default to null).</param>
        /// <param name="">Phase number for this order (required) (default to null).</param>
        /// <param name="">Order consistant id (required) (default to null).</param>
        /// <param name="">Order unique id (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name="">UserId of the order initiator (default to null).</param>
        /// <param name="">PlayerIndex of the order initiator (required) (default to null).</param>
        /// <param name="">Can the user cancel the order ? (required) (default to null).</param>
        /// <param name="">Phase where the order was created (required) (default to null).</param>
        /// <param name="">Phase where the order will be resolved and closed (required) (default to null).</param>
        /// <param name="">Properties of the report to display when order has been executed (default to null).</param>
        /// <param name="">Starting or origin territory label (default to null).</param>
        /// <param name="">Target territory label (default to null).</param>
        /// <param name="">Target Order consistant id (default to null).</param>
        /// <param name="">Current territory label (default to null).</param>
        /// <param name="">Troops engaged in the Order (default to null).</param>
        /// <param name="">Ressources engaged in the order (default to null).</param>
        /// <param name="">Slot index (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name="">Number of constructions to build/destroy (default to null).</param>
        public WgOrderDto(String  = null, Integer  = null, String  = null, String  = null, OrderStatus  = null, OrderType  = null, String  = null, Integer  = null, Boolean  = null, Integer  = null, Integer  = null, Map  = null, String  = null, String  = null, String  = null, String  = null, Map  = null, Map  = null, Integer  = null, InfraType  = null, ConstructionType  = null, AttackTargetType  = null, Integer  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.wgId = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.phase = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.orderId = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.id = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.status = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.type = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.playerIndex = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.cancelable = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.startPhase = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgOrderDto and cannot be null");
            }
            else
            {
                this.resolutionPhase = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.userId = null;
            }
            else
            {
                this.userId = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.reportProperties = null;
            }
            else
            {
                this.reportProperties = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.originTerritory = null;
            }
            else
            {
                this.originTerritory = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.targetTerritory = null;
            }
            else
            {
                this.targetTerritory = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.targetOrderId = null;
            }
            else
            {
                this.targetOrderId = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.currentTerritory = null;
            }
            else
            {
                this.currentTerritory = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.troops = null;
            }
            else
            {
                this.troops = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.ressources = null;
            }
            else
            {
                this.ressources = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.slot = null;
            }
            else
            {
                this.slot = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.infraType = null;
            }
            else
            {
                this.infraType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.constructionType = null;
            }
            else
            {
                this.constructionType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.attackTargetType = null;
            }
            else
            {
                this.attackTargetType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.constructionAmount = null;
            }
            else
            {
                this.constructionAmount = ;
            }
        }
        
        /// <summary>
        /// Wargame id
        /// </summary>
        /// <value>Wargame id</value>
        [DataMember(Name="wgId", EmitDefaultValue=)]
        public String wgId { get; set; }

        /// <summary>
        /// Phase number for this order
        /// </summary>
        /// <value>Phase number for this order</value>
        [DataMember(Name="phase", EmitDefaultValue=)]
        public Integer phase { get; set; }

        /// <summary>
        /// Order consistant id
        /// </summary>
        /// <value>Order consistant id</value>
        [DataMember(Name="orderId", EmitDefaultValue=)]
        public String orderId { get; set; }

        /// <summary>
        /// Order unique id
        /// </summary>
        /// <value>Order unique id</value>
        [DataMember(Name="id", EmitDefaultValue=)]
        public String id { get; set; }

        /// <summary>
        /// Gets or Sets status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=)]
        public OrderStatus status { get; set; }

        /// <summary>
        /// Gets or Sets type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=)]
        public OrderType type { get; set; }

        /// <summary>
        /// UserId of the order initiator
        /// </summary>
        /// <value>UserId of the order initiator</value>
        [DataMember(Name="userId", EmitDefaultValue=)]
        public String userId { get; set; }

        /// <summary>
        /// PlayerIndex of the order initiator
        /// </summary>
        /// <value>PlayerIndex of the order initiator</value>
        [DataMember(Name="playerIndex", EmitDefaultValue=)]
        public Integer playerIndex { get; set; }

        /// <summary>
        /// Can the user cancel the order ?
        /// </summary>
        /// <value>Can the user cancel the order ?</value>
        [DataMember(Name="cancelable", EmitDefaultValue=)]
        public Boolean cancelable { get; set; }

        /// <summary>
        /// Phase where the order was created
        /// </summary>
        /// <value>Phase where the order was created</value>
        [DataMember(Name="startPhase", EmitDefaultValue=)]
        public Integer startPhase { get; set; }

        /// <summary>
        /// Phase where the order will be resolved and closed
        /// </summary>
        /// <value>Phase where the order will be resolved and closed</value>
        [DataMember(Name="resolutionPhase", EmitDefaultValue=)]
        public Integer resolutionPhase { get; set; }

        /// <summary>
        /// Properties of the report to display when order has been executed
        /// </summary>
        /// <value>Properties of the report to display when order has been executed</value>
        [DataMember(Name="reportProperties", EmitDefaultValue=)]
        public Map reportProperties { get; set; }

        /// <summary>
        /// Starting or origin territory label
        /// </summary>
        /// <value>Starting or origin territory label</value>
        [DataMember(Name="originTerritory", EmitDefaultValue=)]
        public String originTerritory { get; set; }

        /// <summary>
        /// Target territory label
        /// </summary>
        /// <value>Target territory label</value>
        [DataMember(Name="targetTerritory", EmitDefaultValue=)]
        public String targetTerritory { get; set; }

        /// <summary>
        /// Target Order consistant id
        /// </summary>
        /// <value>Target Order consistant id</value>
        [DataMember(Name="targetOrderId", EmitDefaultValue=)]
        public String targetOrderId { get; set; }

        /// <summary>
        /// Current territory label
        /// </summary>
        /// <value>Current territory label</value>
        [DataMember(Name="currentTerritory", EmitDefaultValue=)]
        public String currentTerritory { get; set; }

        /// <summary>
        /// Troops engaged in the Order
        /// </summary>
        /// <value>Troops engaged in the Order</value>
        [DataMember(Name="troops", EmitDefaultValue=)]
        public Map troops { get; set; }

        /// <summary>
        /// Ressources engaged in the order
        /// </summary>
        /// <value>Ressources engaged in the order</value>
        [DataMember(Name="ressources", EmitDefaultValue=)]
        public Map ressources { get; set; }

        /// <summary>
        /// Slot index
        /// </summary>
        /// <value>Slot index</value>
        [DataMember(Name="slot", EmitDefaultValue=)]
        public Integer slot { get; set; }

        /// <summary>
        /// Gets or Sets infraType
        /// </summary>
        [DataMember(Name="infraType", EmitDefaultValue=)]
        public InfraType infraType { get; set; }

        /// <summary>
        /// Gets or Sets constructionType
        /// </summary>
        [DataMember(Name="constructionType", EmitDefaultValue=)]
        public ConstructionType constructionType { get; set; }

        /// <summary>
        /// Gets or Sets attackTargetType
        /// </summary>
        [DataMember(Name="attackTargetType", EmitDefaultValue=)]
        public AttackTargetType attackTargetType { get; set; }

        /// <summary>
        /// Number of constructions to build/destroy
        /// </summary>
        /// <value>Number of constructions to build/destroy</value>
        [DataMember(Name="constructionAmount", EmitDefaultValue=)]
        public Integer constructionAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgOrderDto {\n");
            sb.Append("  wgId: ").Append(wgId).Append("\n");
            sb.Append("  phase: ").Append(phase).Append("\n");
            sb.Append("  orderId: ").Append(orderId).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  userId: ").Append(userId).Append("\n");
            sb.Append("  playerIndex: ").Append(playerIndex).Append("\n");
            sb.Append("  cancelable: ").Append(cancelable).Append("\n");
            sb.Append("  startPhase: ").Append(startPhase).Append("\n");
            sb.Append("  resolutionPhase: ").Append(resolutionPhase).Append("\n");
            sb.Append("  reportProperties: ").Append(reportProperties).Append("\n");
            sb.Append("  originTerritory: ").Append(originTerritory).Append("\n");
            sb.Append("  targetTerritory: ").Append(targetTerritory).Append("\n");
            sb.Append("  targetOrderId: ").Append(targetOrderId).Append("\n");
            sb.Append("  currentTerritory: ").Append(currentTerritory).Append("\n");
            sb.Append("  troops: ").Append(troops).Append("\n");
            sb.Append("  ressources: ").Append(ressources).Append("\n");
            sb.Append("  slot: ").Append(slot).Append("\n");
            sb.Append("  infraType: ").Append(infraType).Append("\n");
            sb.Append("  constructionType: ").Append(constructionType).Append("\n");
            sb.Append("  attackTargetType: ").Append(attackTargetType).Append("\n");
            sb.Append("  constructionAmount: ").Append(constructionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgOrderDto);
        }

        /// <summary>
        /// Returns true if WgOrderDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WgOrderDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgOrderDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.wgId == input.wgId ||
                    (this.wgId != null &&
                    this.wgId.Equals(input.wgId))
                ) && 
                (
                    this.phase == input.phase ||
                    (this.phase != null &&
                    this.phase.Equals(input.phase))
                ) && 
                (
                    this.orderId == input.orderId ||
                    (this.orderId != null &&
                    this.orderId.Equals(input.orderId))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.userId == input.userId ||
                    (this.userId != null &&
                    this.userId.Equals(input.userId))
                ) && 
                (
                    this.playerIndex == input.playerIndex ||
                    (this.playerIndex != null &&
                    this.playerIndex.Equals(input.playerIndex))
                ) && 
                (
                    this.cancelable == input.cancelable ||
                    (this.cancelable != null &&
                    this.cancelable.Equals(input.cancelable))
                ) && 
                (
                    this.startPhase == input.startPhase ||
                    (this.startPhase != null &&
                    this.startPhase.Equals(input.startPhase))
                ) && 
                (
                    this.resolutionPhase == input.resolutionPhase ||
                    (this.resolutionPhase != null &&
                    this.resolutionPhase.Equals(input.resolutionPhase))
                ) && 
                (
                    this.reportProperties == input.reportProperties ||
                    this.reportProperties != null &&
                    this.reportProperties.SequenceEqual(input.reportProperties)
                ) && 
                (
                    this.originTerritory == input.originTerritory ||
                    (this.originTerritory != null &&
                    this.originTerritory.Equals(input.originTerritory))
                ) && 
                (
                    this.targetTerritory == input.targetTerritory ||
                    (this.targetTerritory != null &&
                    this.targetTerritory.Equals(input.targetTerritory))
                ) && 
                (
                    this.targetOrderId == input.targetOrderId ||
                    (this.targetOrderId != null &&
                    this.targetOrderId.Equals(input.targetOrderId))
                ) && 
                (
                    this.currentTerritory == input.currentTerritory ||
                    (this.currentTerritory != null &&
                    this.currentTerritory.Equals(input.currentTerritory))
                ) && 
                (
                    this.troops == input.troops ||
                    this.troops != null &&
                    this.troops.SequenceEqual(input.troops)
                ) && 
                (
                    this.ressources == input.ressources ||
                    this.ressources != null &&
                    this.ressources.SequenceEqual(input.ressources)
                ) && 
                (
                    this.slot == input.slot ||
                    (this.slot != null &&
                    this.slot.Equals(input.slot))
                ) && 
                (
                    this.infraType == input.infraType ||
                    (this.infraType != null &&
                    this.infraType.Equals(input.infraType))
                ) && 
                (
                    this.constructionType == input.constructionType ||
                    (this.constructionType != null &&
                    this.constructionType.Equals(input.constructionType))
                ) && 
                (
                    this.attackTargetType == input.attackTargetType ||
                    (this.attackTargetType != null &&
                    this.attackTargetType.Equals(input.attackTargetType))
                ) && 
                (
                    this.constructionAmount == input.constructionAmount ||
                    (this.constructionAmount != null &&
                    this.constructionAmount.Equals(input.constructionAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.wgId != null)
                    hashCode = hashCode * 59 + this.wgId.GetHashCode();
                if (this.phase != null)
                    hashCode = hashCode * 59 + this.phase.GetHashCode();
                if (this.orderId != null)
                    hashCode = hashCode * 59 + this.orderId.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.status != null)
                    hashCode = hashCode * 59 + this.status.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.userId != null)
                    hashCode = hashCode * 59 + this.userId.GetHashCode();
                if (this.playerIndex != null)
                    hashCode = hashCode * 59 + this.playerIndex.GetHashCode();
                if (this.cancelable != null)
                    hashCode = hashCode * 59 + this.cancelable.GetHashCode();
                if (this.startPhase != null)
                    hashCode = hashCode * 59 + this.startPhase.GetHashCode();
                if (this.resolutionPhase != null)
                    hashCode = hashCode * 59 + this.resolutionPhase.GetHashCode();
                if (this.reportProperties != null)
                    hashCode = hashCode * 59 + this.reportProperties.GetHashCode();
                if (this.originTerritory != null)
                    hashCode = hashCode * 59 + this.originTerritory.GetHashCode();
                if (this.targetTerritory != null)
                    hashCode = hashCode * 59 + this.targetTerritory.GetHashCode();
                if (this.targetOrderId != null)
                    hashCode = hashCode * 59 + this.targetOrderId.GetHashCode();
                if (this.currentTerritory != null)
                    hashCode = hashCode * 59 + this.currentTerritory.GetHashCode();
                if (this.troops != null)
                    hashCode = hashCode * 59 + this.troops.GetHashCode();
                if (this.ressources != null)
                    hashCode = hashCode * 59 + this.ressources.GetHashCode();
                if (this.slot != null)
                    hashCode = hashCode * 59 + this.slot.GetHashCode();
                if (this.infraType != null)
                    hashCode = hashCode * 59 + this.infraType.GetHashCode();
                if (this.constructionType != null)
                    hashCode = hashCode * 59 + this.constructionType.GetHashCode();
                if (this.attackTargetType != null)
                    hashCode = hashCode * 59 + this.attackTargetType.GetHashCode();
                if (this.constructionAmount != null)
                    hashCode = hashCode * 59 + this.constructionAmount.GetHashCode();
                return hashCode;
            }
        }

    }
}

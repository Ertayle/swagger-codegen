/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgParameters
    /// </summary>
    [DataContract]
        public partial class WgParameters :  IEquatable<WgParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgParameters" /> class.
        /// </summary>
        /// <param name="">Wargame integer parameters (default to null).</param>
        /// <param name="">Wargame float parameters (default to null).</param>
        /// <param name="">Wargame bool parameters (default to null).</param>
        /// <param name="">Wargame orders duration (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        public WgParameters(Map  = null, Map  = null, Map  = null, Map  = null, WgComplexParameters  = null, WgWinLoseParameters  = null, )
        {
            // use default value if no "" provided
            if ( == null)
            {
                this.integerParameters = null;
            }
            else
            {
                this.integerParameters = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.floatParameters = null;
            }
            else
            {
                this.floatParameters = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.boolParameters = null;
            }
            else
            {
                this.boolParameters = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.orderDurations = null;
            }
            else
            {
                this.orderDurations = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.complexParameters = null;
            }
            else
            {
                this.complexParameters = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.winLoseParameters = null;
            }
            else
            {
                this.winLoseParameters = ;
            }
        }
        
        /// <summary>
        /// Wargame integer parameters
        /// </summary>
        /// <value>Wargame integer parameters</value>
        [DataMember(Name="integerParameters", EmitDefaultValue=)]
        public Map integerParameters { get; set; }

        /// <summary>
        /// Wargame float parameters
        /// </summary>
        /// <value>Wargame float parameters</value>
        [DataMember(Name="floatParameters", EmitDefaultValue=)]
        public Map floatParameters { get; set; }

        /// <summary>
        /// Wargame bool parameters
        /// </summary>
        /// <value>Wargame bool parameters</value>
        [DataMember(Name="boolParameters", EmitDefaultValue=)]
        public Map boolParameters { get; set; }

        /// <summary>
        /// Wargame orders duration
        /// </summary>
        /// <value>Wargame orders duration</value>
        [DataMember(Name="orderDurations", EmitDefaultValue=)]
        public Map orderDurations { get; set; }

        /// <summary>
        /// Gets or Sets complexParameters
        /// </summary>
        [DataMember(Name="complexParameters", EmitDefaultValue=)]
        public WgComplexParameters complexParameters { get; set; }

        /// <summary>
        /// Gets or Sets winLoseParameters
        /// </summary>
        [DataMember(Name="winLoseParameters", EmitDefaultValue=)]
        public WgWinLoseParameters winLoseParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgParameters {\n");
            sb.Append("  integerParameters: ").Append(integerParameters).Append("\n");
            sb.Append("  floatParameters: ").Append(floatParameters).Append("\n");
            sb.Append("  boolParameters: ").Append(boolParameters).Append("\n");
            sb.Append("  orderDurations: ").Append(orderDurations).Append("\n");
            sb.Append("  complexParameters: ").Append(complexParameters).Append("\n");
            sb.Append("  winLoseParameters: ").Append(winLoseParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgParameters);
        }

        /// <summary>
        /// Returns true if WgParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of WgParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.integerParameters == input.integerParameters ||
                    this.integerParameters != null &&
                    this.integerParameters.SequenceEqual(input.integerParameters)
                ) && 
                (
                    this.floatParameters == input.floatParameters ||
                    this.floatParameters != null &&
                    this.floatParameters.SequenceEqual(input.floatParameters)
                ) && 
                (
                    this.boolParameters == input.boolParameters ||
                    this.boolParameters != null &&
                    this.boolParameters.SequenceEqual(input.boolParameters)
                ) && 
                (
                    this.orderDurations == input.orderDurations ||
                    this.orderDurations != null &&
                    this.orderDurations.SequenceEqual(input.orderDurations)
                ) && 
                (
                    this.complexParameters == input.complexParameters ||
                    (this.complexParameters != null &&
                    this.complexParameters.Equals(input.complexParameters))
                ) && 
                (
                    this.winLoseParameters == input.winLoseParameters ||
                    (this.winLoseParameters != null &&
                    this.winLoseParameters.Equals(input.winLoseParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.integerParameters != null)
                    hashCode = hashCode * 59 + this.integerParameters.GetHashCode();
                if (this.floatParameters != null)
                    hashCode = hashCode * 59 + this.floatParameters.GetHashCode();
                if (this.boolParameters != null)
                    hashCode = hashCode * 59 + this.boolParameters.GetHashCode();
                if (this.orderDurations != null)
                    hashCode = hashCode * 59 + this.orderDurations.GetHashCode();
                if (this.complexParameters != null)
                    hashCode = hashCode * 59 + this.complexParameters.GetHashCode();
                if (this.winLoseParameters != null)
                    hashCode = hashCode * 59 + this.winLoseParameters.GetHashCode();
                return hashCode;
            }
        }

    }
}

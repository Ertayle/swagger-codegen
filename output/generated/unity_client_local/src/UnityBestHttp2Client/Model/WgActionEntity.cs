/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgActionEntity
    /// </summary>
    [DataContract]
        public partial class WgActionEntity :  IEquatable<WgActionEntity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgActionEntity" /> class.
        /// </summary>
        /// <param name="">Wargame of the order (required) (default to null).</param>
        /// <param name="">Phase number for this order (required) (default to null).</param>
        /// <param name="">Action territory label (required) (default to null).</param>
        /// <param name="">ID of the action initiator (default to null).</param>
        /// <param name="">PlayerIndex of the order initiator (default to null).</param>
        /// <param name="">Mine states by MineType (default to null).</param>
        /// <param name="">InfraStates by slot number (default to null).</param>
        public WgActionEntity(String  = null, Integer  = null, String  = null, String  = null, Integer  = null, Map  = null, Map  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgActionEntity and cannot be null");
            }
            else
            {
                this.wgId = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgActionEntity and cannot be null");
            }
            else
            {
                this.phase = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgActionEntity and cannot be null");
            }
            else
            {
                this.territory = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.userId = null;
            }
            else
            {
                this.userId = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.playerIndex = null;
            }
            else
            {
                this.playerIndex = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.mineStates = null;
            }
            else
            {
                this.mineStates = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.infraStates = null;
            }
            else
            {
                this.infraStates = ;
            }
        }
        
        /// <summary>
        /// Wargame of the order
        /// </summary>
        /// <value>Wargame of the order</value>
        [DataMember(Name="wgId", EmitDefaultValue=)]
        public String wgId { get; set; }

        /// <summary>
        /// Phase number for this order
        /// </summary>
        /// <value>Phase number for this order</value>
        [DataMember(Name="phase", EmitDefaultValue=)]
        public Integer phase { get; set; }

        /// <summary>
        /// Action territory label
        /// </summary>
        /// <value>Action territory label</value>
        [DataMember(Name="territory", EmitDefaultValue=)]
        public String territory { get; set; }

        /// <summary>
        /// ID of the action initiator
        /// </summary>
        /// <value>ID of the action initiator</value>
        [DataMember(Name="userId", EmitDefaultValue=)]
        public String userId { get; set; }

        /// <summary>
        /// PlayerIndex of the order initiator
        /// </summary>
        /// <value>PlayerIndex of the order initiator</value>
        [DataMember(Name="playerIndex", EmitDefaultValue=)]
        public Integer playerIndex { get; set; }

        /// <summary>
        /// Mine states by MineType
        /// </summary>
        /// <value>Mine states by MineType</value>
        [DataMember(Name="mineStates", EmitDefaultValue=)]
        public Map mineStates { get; set; }

        /// <summary>
        /// InfraStates by slot number
        /// </summary>
        /// <value>InfraStates by slot number</value>
        [DataMember(Name="infraStates", EmitDefaultValue=)]
        public Map infraStates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgActionEntity {\n");
            sb.Append("  wgId: ").Append(wgId).Append("\n");
            sb.Append("  phase: ").Append(phase).Append("\n");
            sb.Append("  territory: ").Append(territory).Append("\n");
            sb.Append("  userId: ").Append(userId).Append("\n");
            sb.Append("  playerIndex: ").Append(playerIndex).Append("\n");
            sb.Append("  mineStates: ").Append(mineStates).Append("\n");
            sb.Append("  infraStates: ").Append(infraStates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgActionEntity);
        }

        /// <summary>
        /// Returns true if WgActionEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of WgActionEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgActionEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.wgId == input.wgId ||
                    (this.wgId != null &&
                    this.wgId.Equals(input.wgId))
                ) && 
                (
                    this.phase == input.phase ||
                    (this.phase != null &&
                    this.phase.Equals(input.phase))
                ) && 
                (
                    this.territory == input.territory ||
                    (this.territory != null &&
                    this.territory.Equals(input.territory))
                ) && 
                (
                    this.userId == input.userId ||
                    (this.userId != null &&
                    this.userId.Equals(input.userId))
                ) && 
                (
                    this.playerIndex == input.playerIndex ||
                    (this.playerIndex != null &&
                    this.playerIndex.Equals(input.playerIndex))
                ) && 
                (
                    this.mineStates == input.mineStates ||
                    this.mineStates != null &&
                    this.mineStates.SequenceEqual(input.mineStates)
                ) && 
                (
                    this.infraStates == input.infraStates ||
                    this.infraStates != null &&
                    this.infraStates.SequenceEqual(input.infraStates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.wgId != null)
                    hashCode = hashCode * 59 + this.wgId.GetHashCode();
                if (this.phase != null)
                    hashCode = hashCode * 59 + this.phase.GetHashCode();
                if (this.territory != null)
                    hashCode = hashCode * 59 + this.territory.GetHashCode();
                if (this.userId != null)
                    hashCode = hashCode * 59 + this.userId.GetHashCode();
                if (this.playerIndex != null)
                    hashCode = hashCode * 59 + this.playerIndex.GetHashCode();
                if (this.mineStates != null)
                    hashCode = hashCode * 59 + this.mineStates.GetHashCode();
                if (this.infraStates != null)
                    hashCode = hashCode * 59 + this.infraStates.GetHashCode();
                return hashCode;
            }
        }

    }
}

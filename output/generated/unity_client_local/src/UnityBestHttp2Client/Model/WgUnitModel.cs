/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgUnitModel
    /// </summary>
    [DataContract]
        public partial class WgUnitModel :  IEquatable<WgUnitModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgUnitModel" /> class.
        /// </summary>
        /// <param name=""> (required) (default to null).</param>
        /// <param name="">Melee attack attribute (required) (default to null).</param>
        /// <param name="">Defense attribute (required) (default to null).</param>
        /// <param name="">Range attack attribute (required) (default to null).</param>
        /// <param name="">Resistance attribute (required) (default to null).</param>
        public WgUnitModel(WgPriceModel  = null, Integer  = null, Integer  = null, Integer  = null, Integer  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgUnitModel and cannot be null");
            }
            else
            {
                this.upkeep = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgUnitModel and cannot be null");
            }
            else
            {
                this.melee = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgUnitModel and cannot be null");
            }
            else
            {
                this.defense = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgUnitModel and cannot be null");
            }
            else
            {
                this.range = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgUnitModel and cannot be null");
            }
            else
            {
                this.resistance = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets upkeep
        /// </summary>
        [DataMember(Name="upkeep", EmitDefaultValue=)]
        public WgPriceModel upkeep { get; set; }

        /// <summary>
        /// Melee attack attribute
        /// </summary>
        /// <value>Melee attack attribute</value>
        [DataMember(Name="melee", EmitDefaultValue=)]
        public Integer melee { get; set; }

        /// <summary>
        /// Defense attribute
        /// </summary>
        /// <value>Defense attribute</value>
        [DataMember(Name="defense", EmitDefaultValue=)]
        public Integer defense { get; set; }

        /// <summary>
        /// Range attack attribute
        /// </summary>
        /// <value>Range attack attribute</value>
        [DataMember(Name="range", EmitDefaultValue=)]
        public Integer range { get; set; }

        /// <summary>
        /// Resistance attribute
        /// </summary>
        /// <value>Resistance attribute</value>
        [DataMember(Name="resistance", EmitDefaultValue=)]
        public Integer resistance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgUnitModel {\n");
            sb.Append("  upkeep: ").Append(upkeep).Append("\n");
            sb.Append("  melee: ").Append(melee).Append("\n");
            sb.Append("  defense: ").Append(defense).Append("\n");
            sb.Append("  range: ").Append(range).Append("\n");
            sb.Append("  resistance: ").Append(resistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgUnitModel);
        }

        /// <summary>
        /// Returns true if WgUnitModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WgUnitModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgUnitModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.upkeep == input.upkeep ||
                    (this.upkeep != null &&
                    this.upkeep.Equals(input.upkeep))
                ) && 
                (
                    this.melee == input.melee ||
                    (this.melee != null &&
                    this.melee.Equals(input.melee))
                ) && 
                (
                    this.defense == input.defense ||
                    (this.defense != null &&
                    this.defense.Equals(input.defense))
                ) && 
                (
                    this.range == input.range ||
                    (this.range != null &&
                    this.range.Equals(input.range))
                ) && 
                (
                    this.resistance == input.resistance ||
                    (this.resistance != null &&
                    this.resistance.Equals(input.resistance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.upkeep != null)
                    hashCode = hashCode * 59 + this.upkeep.GetHashCode();
                if (this.melee != null)
                    hashCode = hashCode * 59 + this.melee.GetHashCode();
                if (this.defense != null)
                    hashCode = hashCode * 59 + this.defense.GetHashCode();
                if (this.range != null)
                    hashCode = hashCode * 59 + this.range.GetHashCode();
                if (this.resistance != null)
                    hashCode = hashCode * 59 + this.resistance.GetHashCode();
                return hashCode;
            }
        }

    }
}

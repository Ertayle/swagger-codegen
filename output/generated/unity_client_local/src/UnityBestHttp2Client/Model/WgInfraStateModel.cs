/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// WgInfraStateModel
    /// </summary>
    [DataContract]
        public partial class WgInfraStateModel :  IEquatable<WgInfraStateModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WgInfraStateModel" /> class.
        /// </summary>
        /// <param name=""> (required) (default to null).</param>
        /// <param name=""> (required) (default to null).</param>
        /// <param name="">Infra construction advancement in percent (default to null).</param>
        /// <param name="">Infra active or not (default to null).</param>
        /// <param name="">Selected recipe (default to null).</param>
        /// <param name="">Number of reserved workers (default to null).</param>
        public WgInfraStateModel(InfraBuildStatus  = null, InfraType  = null, BigDecimal  = null, Boolean  = null, String  = null, BigDecimal  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgInfraStateModel and cannot be null");
            }
            else
            {
                this.infraBuildStatus = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for WgInfraStateModel and cannot be null");
            }
            else
            {
                this.infraType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.inConstructionPercentage = null;
            }
            else
            {
                this.inConstructionPercentage = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.isActive = null;
            }
            else
            {
                this.isActive = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.selectedRecipe = null;
            }
            else
            {
                this.selectedRecipe = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.workers = null;
            }
            else
            {
                this.workers = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets infraBuildStatus
        /// </summary>
        [DataMember(Name="infraBuildStatus", EmitDefaultValue=)]
        public InfraBuildStatus infraBuildStatus { get; set; }

        /// <summary>
        /// Gets or Sets infraType
        /// </summary>
        [DataMember(Name="infraType", EmitDefaultValue=)]
        public InfraType infraType { get; set; }

        /// <summary>
        /// Infra construction advancement in percent
        /// </summary>
        /// <value>Infra construction advancement in percent</value>
        [DataMember(Name="inConstructionPercentage", EmitDefaultValue=)]
        public BigDecimal inConstructionPercentage { get; set; }

        /// <summary>
        /// Infra active or not
        /// </summary>
        /// <value>Infra active or not</value>
        [DataMember(Name="isActive", EmitDefaultValue=)]
        public Boolean isActive { get; set; }

        /// <summary>
        /// Selected recipe
        /// </summary>
        /// <value>Selected recipe</value>
        [DataMember(Name="selectedRecipe", EmitDefaultValue=)]
        public String selectedRecipe { get; set; }

        /// <summary>
        /// Number of reserved workers
        /// </summary>
        /// <value>Number of reserved workers</value>
        [DataMember(Name="workers", EmitDefaultValue=)]
        public BigDecimal workers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WgInfraStateModel {\n");
            sb.Append("  infraBuildStatus: ").Append(infraBuildStatus).Append("\n");
            sb.Append("  infraType: ").Append(infraType).Append("\n");
            sb.Append("  inConstructionPercentage: ").Append(inConstructionPercentage).Append("\n");
            sb.Append("  isActive: ").Append(isActive).Append("\n");
            sb.Append("  selectedRecipe: ").Append(selectedRecipe).Append("\n");
            sb.Append("  workers: ").Append(workers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WgInfraStateModel);
        }

        /// <summary>
        /// Returns true if WgInfraStateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WgInfraStateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WgInfraStateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.infraBuildStatus == input.infraBuildStatus ||
                    (this.infraBuildStatus != null &&
                    this.infraBuildStatus.Equals(input.infraBuildStatus))
                ) && 
                (
                    this.infraType == input.infraType ||
                    (this.infraType != null &&
                    this.infraType.Equals(input.infraType))
                ) && 
                (
                    this.inConstructionPercentage == input.inConstructionPercentage ||
                    (this.inConstructionPercentage != null &&
                    this.inConstructionPercentage.Equals(input.inConstructionPercentage))
                ) && 
                (
                    this.isActive == input.isActive ||
                    (this.isActive != null &&
                    this.isActive.Equals(input.isActive))
                ) && 
                (
                    this.selectedRecipe == input.selectedRecipe ||
                    (this.selectedRecipe != null &&
                    this.selectedRecipe.Equals(input.selectedRecipe))
                ) && 
                (
                    this.workers == input.workers ||
                    (this.workers != null &&
                    this.workers.Equals(input.workers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.infraBuildStatus != null)
                    hashCode = hashCode * 59 + this.infraBuildStatus.GetHashCode();
                if (this.infraType != null)
                    hashCode = hashCode * 59 + this.infraType.GetHashCode();
                if (this.inConstructionPercentage != null)
                    hashCode = hashCode * 59 + this.inConstructionPercentage.GetHashCode();
                if (this.isActive != null)
                    hashCode = hashCode * 59 + this.isActive.GetHashCode();
                if (this.selectedRecipe != null)
                    hashCode = hashCode * 59 + this.selectedRecipe.GetHashCode();
                if (this.workers != null)
                    hashCode = hashCode * 59 + this.workers.GetHashCode();
                return hashCode;
            }
        }

    }
}

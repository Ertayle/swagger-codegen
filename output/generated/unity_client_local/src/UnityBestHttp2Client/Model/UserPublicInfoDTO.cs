/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// UserPublicInfoDTO
    /// </summary>
    [DataContract]
        public partial class UserPublicInfoDTO :  IEquatable<UserPublicInfoDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPublicInfoDTO" /> class.
        /// </summary>
        /// <param name=""> (required) (default to null).</param>
        /// <param name="">Ingame player name (unique) (required) (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name="">Array of WgPlayer entries: links user to his wargames (default to null).</param>
        public UserPublicInfoDTO(String  = null, String  = null, List  = null, List  = null, )
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for UserPublicInfoDTO and cannot be null");
            }
            else
            {
                this.id = ;
            }
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new InvalidDataException(" is a required property for UserPublicInfoDTO and cannot be null");
            }
            else
            {
                this.username = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.roles = null;
            }
            else
            {
                this.roles = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.wgEntries = null;
            }
            else
            {
                this.wgEntries = ;
            }
        }
        
        /// <summary>
        /// Gets or Sets id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=)]
        public String id { get; set; }

        /// <summary>
        /// Ingame player name (unique)
        /// </summary>
        /// <value>Ingame player name (unique)</value>
        [DataMember(Name="username", EmitDefaultValue=)]
        public String username { get; set; }

        /// <summary>
        /// Gets or Sets roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=)]
        public List roles { get; set; }

        /// <summary>
        /// Array of WgPlayer entries: links user to his wargames
        /// </summary>
        /// <value>Array of WgPlayer entries: links user to his wargames</value>
        [DataMember(Name="wgEntries", EmitDefaultValue=)]
        public List wgEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPublicInfoDTO {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  username: ").Append(username).Append("\n");
            sb.Append("  roles: ").Append(roles).Append("\n");
            sb.Append("  wgEntries: ").Append(wgEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPublicInfoDTO);
        }

        /// <summary>
        /// Returns true if UserPublicInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPublicInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPublicInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.username == input.username ||
                    (this.username != null &&
                    this.username.Equals(input.username))
                ) && 
                (
                    this.roles == input.roles ||
                    this.roles != null &&
                    this.roles.SequenceEqual(input.roles)
                ) && 
                (
                    this.wgEntries == input.wgEntries ||
                    this.wgEntries != null &&
                    this.wgEntries.SequenceEqual(input.wgEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.username != null)
                    hashCode = hashCode * 59 + this.username.GetHashCode();
                if (this.roles != null)
                    hashCode = hashCode * 59 + this.roles.GetHashCode();
                if (this.wgEntries != null)
                    hashCode = hashCode * 59 + this.wgEntries.GetHashCode();
                return hashCode;
            }
        }

    }
}

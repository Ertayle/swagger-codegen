/* 
 * Battlecorp Horizon
 *
 * This documentation is for developpers of the Battlecorp Horizon application. Any usage of this API in time will require a dedicated access token in order to interact with the API.         Pointing to Database Prefix: DEV_sebus
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fedcom.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UnityBestHttp2Client.Client.SwaggerDateConverter;

namespace UnityBestHttp2Client.Model
{
    /// <summary>
    /// UpdateWgAdminDto
    /// </summary>
    [DataContract]
        public partial class UpdateWgAdminDto :  IEquatable<UpdateWgAdminDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWgAdminDto" /> class.
        /// </summary>
        /// <param name="">Wargame id (default to null).</param>
        /// <param name="">Phase number for this wgAdmin (default to null).</param>
        /// <param name="">WgAdmin unique id (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name="">UserId of the wgAdmin initiator (default to null).</param>
        /// <param name="">PlayerIndex (default to null).</param>
        /// <param name="">Target territory label (default to null).</param>
        /// <param name="">Troops dict (default to null).</param>
        /// <param name="">Ressources dict (default to null).</param>
        /// <param name="">Currencies dict (default to null).</param>
        /// <param name="">Slot index (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name=""> (default to null).</param>
        /// <param name="">Number of constructions to build/destroy (default to null).</param>
        public UpdateWgAdminDto(String  = null, Integer  = null, String  = null, WgAdminType  = null, String  = null, Integer  = null, String  = null, Map  = null, Map  = null, Map  = null, Integer  = null, InfraType  = null, ConstructionType  = null, Integer  = null, )
        {
            // use default value if no "" provided
            if ( == null)
            {
                this.wgId = null;
            }
            else
            {
                this.wgId = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.phase = null;
            }
            else
            {
                this.phase = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.id = null;
            }
            else
            {
                this.id = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.type = null;
            }
            else
            {
                this.type = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.userId = null;
            }
            else
            {
                this.userId = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.playerIndex = null;
            }
            else
            {
                this.playerIndex = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.territoryLabel = null;
            }
            else
            {
                this.territoryLabel = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.troops = null;
            }
            else
            {
                this.troops = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.ressources = null;
            }
            else
            {
                this.ressources = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.currencies = null;
            }
            else
            {
                this.currencies = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.slot = null;
            }
            else
            {
                this.slot = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.infraType = null;
            }
            else
            {
                this.infraType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.constructionType = null;
            }
            else
            {
                this.constructionType = ;
            }
            // use default value if no "" provided
            if ( == null)
            {
                this.constructionAmount = null;
            }
            else
            {
                this.constructionAmount = ;
            }
        }
        
        /// <summary>
        /// Wargame id
        /// </summary>
        /// <value>Wargame id</value>
        [DataMember(Name="wgId", EmitDefaultValue=)]
        public String wgId { get; set; }

        /// <summary>
        /// Phase number for this wgAdmin
        /// </summary>
        /// <value>Phase number for this wgAdmin</value>
        [DataMember(Name="phase", EmitDefaultValue=)]
        public Integer phase { get; set; }

        /// <summary>
        /// WgAdmin unique id
        /// </summary>
        /// <value>WgAdmin unique id</value>
        [DataMember(Name="id", EmitDefaultValue=)]
        public String id { get; set; }

        /// <summary>
        /// Gets or Sets type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=)]
        public WgAdminType type { get; set; }

        /// <summary>
        /// UserId of the wgAdmin initiator
        /// </summary>
        /// <value>UserId of the wgAdmin initiator</value>
        [DataMember(Name="userId", EmitDefaultValue=)]
        public String userId { get; set; }

        /// <summary>
        /// PlayerIndex
        /// </summary>
        /// <value>PlayerIndex</value>
        [DataMember(Name="playerIndex", EmitDefaultValue=)]
        public Integer playerIndex { get; set; }

        /// <summary>
        /// Target territory label
        /// </summary>
        /// <value>Target territory label</value>
        [DataMember(Name="territoryLabel", EmitDefaultValue=)]
        public String territoryLabel { get; set; }

        /// <summary>
        /// Troops dict
        /// </summary>
        /// <value>Troops dict</value>
        [DataMember(Name="troops", EmitDefaultValue=)]
        public Map troops { get; set; }

        /// <summary>
        /// Ressources dict
        /// </summary>
        /// <value>Ressources dict</value>
        [DataMember(Name="ressources", EmitDefaultValue=)]
        public Map ressources { get; set; }

        /// <summary>
        /// Currencies dict
        /// </summary>
        /// <value>Currencies dict</value>
        [DataMember(Name="currencies", EmitDefaultValue=)]
        public Map currencies { get; set; }

        /// <summary>
        /// Slot index
        /// </summary>
        /// <value>Slot index</value>
        [DataMember(Name="slot", EmitDefaultValue=)]
        public Integer slot { get; set; }

        /// <summary>
        /// Gets or Sets infraType
        /// </summary>
        [DataMember(Name="infraType", EmitDefaultValue=)]
        public InfraType infraType { get; set; }

        /// <summary>
        /// Gets or Sets constructionType
        /// </summary>
        [DataMember(Name="constructionType", EmitDefaultValue=)]
        public ConstructionType constructionType { get; set; }

        /// <summary>
        /// Number of constructions to build/destroy
        /// </summary>
        /// <value>Number of constructions to build/destroy</value>
        [DataMember(Name="constructionAmount", EmitDefaultValue=)]
        public Integer constructionAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateWgAdminDto {\n");
            sb.Append("  wgId: ").Append(wgId).Append("\n");
            sb.Append("  phase: ").Append(phase).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  userId: ").Append(userId).Append("\n");
            sb.Append("  playerIndex: ").Append(playerIndex).Append("\n");
            sb.Append("  territoryLabel: ").Append(territoryLabel).Append("\n");
            sb.Append("  troops: ").Append(troops).Append("\n");
            sb.Append("  ressources: ").Append(ressources).Append("\n");
            sb.Append("  currencies: ").Append(currencies).Append("\n");
            sb.Append("  slot: ").Append(slot).Append("\n");
            sb.Append("  infraType: ").Append(infraType).Append("\n");
            sb.Append("  constructionType: ").Append(constructionType).Append("\n");
            sb.Append("  constructionAmount: ").Append(constructionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateWgAdminDto);
        }

        /// <summary>
        /// Returns true if UpdateWgAdminDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateWgAdminDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateWgAdminDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.wgId == input.wgId ||
                    (this.wgId != null &&
                    this.wgId.Equals(input.wgId))
                ) && 
                (
                    this.phase == input.phase ||
                    (this.phase != null &&
                    this.phase.Equals(input.phase))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.userId == input.userId ||
                    (this.userId != null &&
                    this.userId.Equals(input.userId))
                ) && 
                (
                    this.playerIndex == input.playerIndex ||
                    (this.playerIndex != null &&
                    this.playerIndex.Equals(input.playerIndex))
                ) && 
                (
                    this.territoryLabel == input.territoryLabel ||
                    (this.territoryLabel != null &&
                    this.territoryLabel.Equals(input.territoryLabel))
                ) && 
                (
                    this.troops == input.troops ||
                    this.troops != null &&
                    this.troops.SequenceEqual(input.troops)
                ) && 
                (
                    this.ressources == input.ressources ||
                    this.ressources != null &&
                    this.ressources.SequenceEqual(input.ressources)
                ) && 
                (
                    this.currencies == input.currencies ||
                    this.currencies != null &&
                    this.currencies.SequenceEqual(input.currencies)
                ) && 
                (
                    this.slot == input.slot ||
                    (this.slot != null &&
                    this.slot.Equals(input.slot))
                ) && 
                (
                    this.infraType == input.infraType ||
                    (this.infraType != null &&
                    this.infraType.Equals(input.infraType))
                ) && 
                (
                    this.constructionType == input.constructionType ||
                    (this.constructionType != null &&
                    this.constructionType.Equals(input.constructionType))
                ) && 
                (
                    this.constructionAmount == input.constructionAmount ||
                    (this.constructionAmount != null &&
                    this.constructionAmount.Equals(input.constructionAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.wgId != null)
                    hashCode = hashCode * 59 + this.wgId.GetHashCode();
                if (this.phase != null)
                    hashCode = hashCode * 59 + this.phase.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.userId != null)
                    hashCode = hashCode * 59 + this.userId.GetHashCode();
                if (this.playerIndex != null)
                    hashCode = hashCode * 59 + this.playerIndex.GetHashCode();
                if (this.territoryLabel != null)
                    hashCode = hashCode * 59 + this.territoryLabel.GetHashCode();
                if (this.troops != null)
                    hashCode = hashCode * 59 + this.troops.GetHashCode();
                if (this.ressources != null)
                    hashCode = hashCode * 59 + this.ressources.GetHashCode();
                if (this.currencies != null)
                    hashCode = hashCode * 59 + this.currencies.GetHashCode();
                if (this.slot != null)
                    hashCode = hashCode * 59 + this.slot.GetHashCode();
                if (this.infraType != null)
                    hashCode = hashCode * 59 + this.infraType.GetHashCode();
                if (this.constructionType != null)
                    hashCode = hashCode * 59 + this.constructionType.GetHashCode();
                if (this.constructionAmount != null)
                    hashCode = hashCode * 59 + this.constructionAmount.GetHashCode();
                return hashCode;
            }
        }

    }
}
